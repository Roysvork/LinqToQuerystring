//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.5.0.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.5.0.2 C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g 2019-03-07 21:48:00

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace  LinqToQuerystring 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.5.0.2")]
[System.CLSCompliant(false)]
public partial class LinqToQuerystringParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "AGGREGATE", "ALIAS", "ALL", "ALLPAGES", "AND", "ANY", "APPLY", "AS", "ASC", "ASSIGN", "AVERAGE", "BOOL", "BYTE", "COUNT", "DATETIME", "DAY", "DAYS", "DECIMAL", "DESC", "DOUBLE", "DYNAMICIDENTIFIER", "ENDSWITH", "EQUALS", "ESC_SEQ", "EXPAND", "FILTER", "GREATERTHAN", "GREATERTHANOREQUAL", "GUID", "HEX_DIGIT", "HEX_PAIR", "HOUR", "HOURS", "IDENTIFIER", "IGNORED", "INLINECOUNT", "INT", "LESSTHAN", "LESSTHANOREQUAL", "LONG", "MAX", "MIN", "MINUTE", "MINUTES", "MONTH", "NEWLINE", "NONE", "NOT", "NOTEQUALS", "NULL", "OCTAL_ESC", "OR", "ORDERBY", "SECOND", "SECONDS", "SELECT", "SINGLE", "SKIP", "SPACE", "STARTSWITH", "STRING", "SUBSTRINGOF", "SUM", "TOLOWER", "TOP", "TOUPPER", "UNICODE_ESC", "WITH", "YEAR", "YEARS", "'&'", "'('", "')'", "','", "'/'", "':'"
	};
	public const int EOF=-1;
	public const int AGGREGATE=4;
	public const int ALIAS=5;
	public const int ALL=6;
	public const int ALLPAGES=7;
	public const int AND=8;
	public const int ANY=9;
	public const int APPLY=10;
	public const int AS=11;
	public const int ASC=12;
	public const int ASSIGN=13;
	public const int AVERAGE=14;
	public const int BOOL=15;
	public const int BYTE=16;
	public const int COUNT=17;
	public const int DATETIME=18;
	public const int DAY=19;
	public const int DAYS=20;
	public const int DECIMAL=21;
	public const int DESC=22;
	public const int DOUBLE=23;
	public const int DYNAMICIDENTIFIER=24;
	public const int ENDSWITH=25;
	public const int EQUALS=26;
	public const int ESC_SEQ=27;
	public const int EXPAND=28;
	public const int FILTER=29;
	public const int GREATERTHAN=30;
	public const int GREATERTHANOREQUAL=31;
	public const int GUID=32;
	public const int HEX_DIGIT=33;
	public const int HEX_PAIR=34;
	public const int HOUR=35;
	public const int HOURS=36;
	public const int IDENTIFIER=37;
	public const int IGNORED=38;
	public const int INLINECOUNT=39;
	public const int INT=40;
	public const int LESSTHAN=41;
	public const int LESSTHANOREQUAL=42;
	public const int LONG=43;
	public const int MAX=44;
	public const int MIN=45;
	public const int MINUTE=46;
	public const int MINUTES=47;
	public const int MONTH=48;
	public const int NEWLINE=49;
	public const int NONE=50;
	public const int NOT=51;
	public const int NOTEQUALS=52;
	public const int NULL=53;
	public const int OCTAL_ESC=54;
	public const int OR=55;
	public const int ORDERBY=56;
	public const int SECOND=57;
	public const int SECONDS=58;
	public const int SELECT=59;
	public const int SINGLE=60;
	public const int SKIP=61;
	public const int SPACE=62;
	public const int STARTSWITH=63;
	public const int STRING=64;
	public const int SUBSTRINGOF=65;
	public const int SUM=66;
	public const int TOLOWER=67;
	public const int TOP=68;
	public const int TOUPPER=69;
	public const int UNICODE_ESC=70;
	public const int WITH=71;
	public const int YEAR=72;
	public const int YEARS=73;
	public const int T__74=74;
	public const int T__75=75;
	public const int T__76=76;
	public const int T__77=77;
	public const int T__78=78;
	public const int T__79=79;

	public LinqToQuerystringParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public LinqToQuerystringParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		ITreeAdaptor treeAdaptor = default(ITreeAdaptor);
		CreateTreeAdaptor(ref treeAdaptor);
		TreeAdaptor = treeAdaptor ?? new CommonTreeAdaptor();
		OnCreated();
	}
	// Implement this function in your helper file to use a custom tree adaptor
	partial void CreateTreeAdaptor(ref ITreeAdaptor adaptor);

	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return LinqToQuerystringParser.tokenNames; } }
	public override string GrammarFileName { get { return "C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_prog();
	partial void LeaveRule_prog();
	// $ANTLR start "prog"
	// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:33:8: public prog : ( param ( '&' ! param )* )* ;
	[GrammarRule("prog")]
	public AstParserRuleReturnScope<object, IToken> prog()
	{
		EnterRule_prog();
		EnterRule("prog", 1);
		TraceIn("prog", 1);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken char_literal2 = default(IToken);
		AstParserRuleReturnScope<object, IToken> param1 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> param3 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal2_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "prog");
		DebugLocation(33, 25);
		try
		{
			// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:34:2: ( ( param ( '&' ! param )* )* )
			DebugEnterAlt(1);
			// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:34:4: ( param ( '&' ! param )* )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(34, 4);
			// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:34:4: ( param ( '&' ! param )* )*
			try { DebugEnterSubRule(2);
			while (true)
			{
				int alt2=2;
				try { DebugEnterDecision(2, false);
				int LA2_1 = input.LA(1);

				if ((LA2_1==APPLY||(LA2_1>=EXPAND && LA2_1<=FILTER)||(LA2_1>=IGNORED && LA2_1<=INLINECOUNT)||LA2_1==ORDERBY||LA2_1==SELECT||LA2_1==SKIP||LA2_1==TOP))
				{
					alt2 = 1;
				}


				} finally { DebugExitDecision(2); }
				switch ( alt2 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:34:5: param ( '&' ! param )*
					{
					DebugLocation(34, 5);
					PushFollow(Follow._param_in_prog76);
					param1=param();
					PopFollow();

					adaptor.AddChild(root_0, param1.Tree);
					DebugLocation(34, 11);
					// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:34:11: ( '&' ! param )*
					try { DebugEnterSubRule(1);
					while (true)
					{
						int alt1=2;
						try { DebugEnterDecision(1, false);
						int LA1_1 = input.LA(1);

						if ((LA1_1==74))
						{
							alt1 = 1;
						}


						} finally { DebugExitDecision(1); }
						switch ( alt1 )
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:34:12: '&' ! param
							{
							DebugLocation(34, 15);
							char_literal2=(IToken)Match(input,74,Follow._74_in_prog79); 
							DebugLocation(34, 17);
							PushFollow(Follow._param_in_prog82);
							param3=param();
							PopFollow();

							adaptor.AddChild(root_0, param3.Tree);

							}
							break;

						default:
							goto loop1;
						}
					}

					loop1:
						;

					} finally { DebugExitSubRule(1); }


					}
					break;

				default:
					goto loop2;
				}
			}

			loop2:
				;

			} finally { DebugExitSubRule(2); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("prog", 1);
			LeaveRule("prog", 1);
			LeaveRule_prog();
		}
		DebugLocation(34, 25);
		} finally { DebugExitRule(GrammarFileName, "prog"); }
		return retval;

	}
	// $ANTLR end "prog"

	partial void EnterRule_param();
	partial void LeaveRule_param();
	// $ANTLR start "param"
	// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:36:1: param : ( orderby | top | skip | filter | select | inlinecount | expand | ignored | apply ) ;
	[GrammarRule("param")]
	private AstParserRuleReturnScope<object, IToken> param()
	{
		EnterRule_param();
		EnterRule("param", 2);
		TraceIn("param", 2);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		AstParserRuleReturnScope<object, IToken> orderby4 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> top5 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> skip6 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> filter7 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> select8 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> inlinecount9 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> expand10 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> ignored11 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> apply12 = default(AstParserRuleReturnScope<object, IToken>);

		try { DebugEnterRule(GrammarFileName, "param");
		DebugLocation(36, 89);
		try
		{
			// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:36:7: ( ( orderby | top | skip | filter | select | inlinecount | expand | ignored | apply ) )
			DebugEnterAlt(1);
			// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:36:9: ( orderby | top | skip | filter | select | inlinecount | expand | ignored | apply )
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(36, 9);
			// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:36:9: ( orderby | top | skip | filter | select | inlinecount | expand | ignored | apply )
			int alt3=9;
			try { DebugEnterSubRule(3);
			try { DebugEnterDecision(3, false);
			switch (input.LA(1))
			{
			case ORDERBY:
				{
				alt3 = 1;
				}
				break;
			case TOP:
				{
				alt3 = 2;
				}
				break;
			case SKIP:
				{
				alt3 = 3;
				}
				break;
			case FILTER:
				{
				alt3 = 4;
				}
				break;
			case SELECT:
				{
				alt3 = 5;
				}
				break;
			case INLINECOUNT:
				{
				alt3 = 6;
				}
				break;
			case EXPAND:
				{
				alt3 = 7;
				}
				break;
			case IGNORED:
				{
				alt3 = 8;
				}
				break;
			case APPLY:
				{
				alt3 = 9;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 3, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(3); }
			switch (alt3)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:36:10: orderby
				{
				DebugLocation(36, 10);
				PushFollow(Follow._orderby_in_param95);
				orderby4=orderby();
				PopFollow();

				adaptor.AddChild(root_0, orderby4.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:36:20: top
				{
				DebugLocation(36, 20);
				PushFollow(Follow._top_in_param99);
				top5=top();
				PopFollow();

				adaptor.AddChild(root_0, top5.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:36:26: skip
				{
				DebugLocation(36, 26);
				PushFollow(Follow._skip_in_param103);
				skip6=skip();
				PopFollow();

				adaptor.AddChild(root_0, skip6.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:36:33: filter
				{
				DebugLocation(36, 33);
				PushFollow(Follow._filter_in_param107);
				filter7=filter();
				PopFollow();

				adaptor.AddChild(root_0, filter7.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:36:42: select
				{
				DebugLocation(36, 42);
				PushFollow(Follow._select_in_param111);
				select8=select();
				PopFollow();

				adaptor.AddChild(root_0, select8.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:36:51: inlinecount
				{
				DebugLocation(36, 51);
				PushFollow(Follow._inlinecount_in_param115);
				inlinecount9=inlinecount();
				PopFollow();

				adaptor.AddChild(root_0, inlinecount9.Tree);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:36:65: expand
				{
				DebugLocation(36, 65);
				PushFollow(Follow._expand_in_param119);
				expand10=expand();
				PopFollow();

				adaptor.AddChild(root_0, expand10.Tree);

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:36:74: ignored
				{
				DebugLocation(36, 74);
				PushFollow(Follow._ignored_in_param123);
				ignored11=ignored();
				PopFollow();

				adaptor.AddChild(root_0, ignored11.Tree);

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:36:84: apply
				{
				DebugLocation(36, 84);
				PushFollow(Follow._apply_in_param127);
				apply12=apply();
				PopFollow();

				adaptor.AddChild(root_0, apply12.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(3); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("param", 2);
			LeaveRule("param", 2);
			LeaveRule_param();
		}
		DebugLocation(36, 89);
		} finally { DebugExitRule(GrammarFileName, "param"); }
		return retval;

	}
	// $ANTLR end "param"

	partial void EnterRule_skip();
	partial void LeaveRule_skip();
	// $ANTLR start "skip"
	// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:38:1: skip : SKIP ^ ( INT )+ ;
	[GrammarRule("skip")]
	private AstParserRuleReturnScope<object, IToken> skip()
	{
		EnterRule_skip();
		EnterRule("skip", 3);
		TraceIn("skip", 3);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken SKIP13 = default(IToken);
		IToken INT14 = default(IToken);

		object SKIP13_tree = default(object);
		object INT14_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "skip");
		DebugLocation(38, 13);
		try
		{
			// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:39:2: ( SKIP ^ ( INT )+ )
			DebugEnterAlt(1);
			// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:39:4: SKIP ^ ( INT )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(39, 8);
			SKIP13=(IToken)Match(input,SKIP,Follow._SKIP_in_skip138); 
			SKIP13_tree = (object)adaptor.Create(SKIP13);
			root_0 = (object)adaptor.BecomeRoot(SKIP13_tree, root_0);
			DebugLocation(39, 10);
			// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:39:10: ( INT )+
			int cnt4=0;
			try { DebugEnterSubRule(4);
			while (true)
			{
				int alt4=2;
				try { DebugEnterDecision(4, false);
				int LA4_1 = input.LA(1);

				if ((LA4_1==INT))
				{
					alt4 = 1;
				}


				} finally { DebugExitDecision(4); }
				switch (alt4)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:39:10: INT
					{
					DebugLocation(39, 10);
					INT14=(IToken)Match(input,INT,Follow._INT_in_skip141); 
					INT14_tree = (object)adaptor.Create(INT14);
					adaptor.AddChild(root_0, INT14_tree);

					}
					break;

				default:
					if (cnt4 >= 1)
						goto loop4;

					EarlyExitException eee4 = new EarlyExitException( 4, input );
					DebugRecognitionException(eee4);
					throw eee4;
				}
				cnt4++;
			}
			loop4:
				;

			} finally { DebugExitSubRule(4); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("skip", 3);
			LeaveRule("skip", 3);
			LeaveRule_skip();
		}
		DebugLocation(39, 13);
		} finally { DebugExitRule(GrammarFileName, "skip"); }
		return retval;

	}
	// $ANTLR end "skip"

	partial void EnterRule_top();
	partial void LeaveRule_top();
	// $ANTLR start "top"
	// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:41:1: top : TOP ^ ( INT )+ ;
	[GrammarRule("top")]
	private AstParserRuleReturnScope<object, IToken> top()
	{
		EnterRule_top();
		EnterRule("top", 4);
		TraceIn("top", 4);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken TOP15 = default(IToken);
		IToken INT16 = default(IToken);

		object TOP15_tree = default(object);
		object INT16_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "top");
		DebugLocation(41, 12);
		try
		{
			// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:42:2: ( TOP ^ ( INT )+ )
			DebugEnterAlt(1);
			// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:42:4: TOP ^ ( INT )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(42, 7);
			TOP15=(IToken)Match(input,TOP,Follow._TOP_in_top152); 
			TOP15_tree = (object)adaptor.Create(TOP15);
			root_0 = (object)adaptor.BecomeRoot(TOP15_tree, root_0);
			DebugLocation(42, 9);
			// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:42:9: ( INT )+
			int cnt5=0;
			try { DebugEnterSubRule(5);
			while (true)
			{
				int alt5=2;
				try { DebugEnterDecision(5, false);
				int LA5_1 = input.LA(1);

				if ((LA5_1==INT))
				{
					alt5 = 1;
				}


				} finally { DebugExitDecision(5); }
				switch (alt5)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:42:9: INT
					{
					DebugLocation(42, 9);
					INT16=(IToken)Match(input,INT,Follow._INT_in_top155); 
					INT16_tree = (object)adaptor.Create(INT16);
					adaptor.AddChild(root_0, INT16_tree);

					}
					break;

				default:
					if (cnt5 >= 1)
						goto loop5;

					EarlyExitException eee5 = new EarlyExitException( 5, input );
					DebugRecognitionException(eee5);
					throw eee5;
				}
				cnt5++;
			}
			loop5:
				;

			} finally { DebugExitSubRule(5); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("top", 4);
			LeaveRule("top", 4);
			LeaveRule_top();
		}
		DebugLocation(42, 12);
		} finally { DebugExitRule(GrammarFileName, "top"); }
		return retval;

	}
	// $ANTLR end "top"

	partial void EnterRule_filter();
	partial void LeaveRule_filter();
	// $ANTLR start "filter"
	// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:44:1: filter : FILTER ^ filterexpression[false] ;
	[GrammarRule("filter")]
	private AstParserRuleReturnScope<object, IToken> filter()
	{
		EnterRule_filter();
		EnterRule("filter", 5);
		TraceIn("filter", 5);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken FILTER17 = default(IToken);
		AstParserRuleReturnScope<object, IToken> filterexpression18 = default(AstParserRuleReturnScope<object, IToken>);

		object FILTER17_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "filter");
		DebugLocation(44, 34);
		try
		{
			// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:45:2: ( FILTER ^ filterexpression[false] )
			DebugEnterAlt(1);
			// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:45:4: FILTER ^ filterexpression[false]
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(45, 10);
			FILTER17=(IToken)Match(input,FILTER,Follow._FILTER_in_filter166); 
			FILTER17_tree = (object)adaptor.Create(FILTER17);
			root_0 = (object)adaptor.BecomeRoot(FILTER17_tree, root_0);
			DebugLocation(45, 12);
			PushFollow(Follow._filterexpression_in_filter169);
			filterexpression18=filterexpression(false);
			PopFollow();

			adaptor.AddChild(root_0, filterexpression18.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("filter", 5);
			LeaveRule("filter", 5);
			LeaveRule_filter();
		}
		DebugLocation(45, 34);
		} finally { DebugExitRule(GrammarFileName, "filter"); }
		return retval;

	}
	// $ANTLR end "filter"

	partial void EnterRule_select();
	partial void LeaveRule_select();
	// $ANTLR start "select"
	// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:47:1: select : SELECT ^ propertyname[false] ( SPACE ! asexp )? ( ',' ! propertyname[false] ( SPACE ! asexp )? )* ;
	[GrammarRule("select")]
	private AstParserRuleReturnScope<object, IToken> select()
	{
		EnterRule_select();
		EnterRule("select", 6);
		TraceIn("select", 6);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken SELECT19 = default(IToken);
		IToken SPACE21 = default(IToken);
		IToken char_literal23 = default(IToken);
		IToken SPACE25 = default(IToken);
		AstParserRuleReturnScope<object, IToken> propertyname20 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> asexp22 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> propertyname24 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> asexp26 = default(AstParserRuleReturnScope<object, IToken>);

		object SELECT19_tree = default(object);
		object SPACE21_tree = default(object);
		object char_literal23_tree = default(object);
		object SPACE25_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "select");
		DebugLocation(47, 90);
		try
		{
			// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:48:2: ( SELECT ^ propertyname[false] ( SPACE ! asexp )? ( ',' ! propertyname[false] ( SPACE ! asexp )? )* )
			DebugEnterAlt(1);
			// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:48:4: SELECT ^ propertyname[false] ( SPACE ! asexp )? ( ',' ! propertyname[false] ( SPACE ! asexp )? )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(48, 10);
			SELECT19=(IToken)Match(input,SELECT,Follow._SELECT_in_select180); 
			SELECT19_tree = (object)adaptor.Create(SELECT19);
			root_0 = (object)adaptor.BecomeRoot(SELECT19_tree, root_0);
			DebugLocation(48, 12);
			PushFollow(Follow._propertyname_in_select183);
			propertyname20=propertyname(false);
			PopFollow();

			adaptor.AddChild(root_0, propertyname20.Tree);
			DebugLocation(48, 32);
			// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:48:32: ( SPACE ! asexp )?
			int alt6=2;
			try { DebugEnterSubRule(6);
			try { DebugEnterDecision(6, false);
			int LA6_1 = input.LA(1);

			if ((LA6_1==SPACE))
			{
				alt6 = 1;
			}
			} finally { DebugExitDecision(6); }
			switch (alt6)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:48:33: SPACE ! asexp
				{
				DebugLocation(48, 38);
				SPACE21=(IToken)Match(input,SPACE,Follow._SPACE_in_select187); 
				DebugLocation(48, 40);
				PushFollow(Follow._asexp_in_select190);
				asexp22=asexp();
				PopFollow();

				adaptor.AddChild(root_0, asexp22.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(6); }

			DebugLocation(48, 48);
			// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:48:48: ( ',' ! propertyname[false] ( SPACE ! asexp )? )*
			try { DebugEnterSubRule(8);
			while (true)
			{
				int alt8=2;
				try { DebugEnterDecision(8, false);
				int LA8_1 = input.LA(1);

				if ((LA8_1==77))
				{
					alt8 = 1;
				}


				} finally { DebugExitDecision(8); }
				switch ( alt8 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:48:49: ',' ! propertyname[false] ( SPACE ! asexp )?
					{
					DebugLocation(48, 52);
					char_literal23=(IToken)Match(input,77,Follow._77_in_select195); 
					DebugLocation(48, 54);
					PushFollow(Follow._propertyname_in_select198);
					propertyname24=propertyname(false);
					PopFollow();

					adaptor.AddChild(root_0, propertyname24.Tree);
					DebugLocation(48, 74);
					// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:48:74: ( SPACE ! asexp )?
					int alt7=2;
					try { DebugEnterSubRule(7);
					try { DebugEnterDecision(7, false);
					int LA7_1 = input.LA(1);

					if ((LA7_1==SPACE))
					{
						alt7 = 1;
					}
					} finally { DebugExitDecision(7); }
					switch (alt7)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:48:75: SPACE ! asexp
						{
						DebugLocation(48, 80);
						SPACE25=(IToken)Match(input,SPACE,Follow._SPACE_in_select202); 
						DebugLocation(48, 82);
						PushFollow(Follow._asexp_in_select205);
						asexp26=asexp();
						PopFollow();

						adaptor.AddChild(root_0, asexp26.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(7); }


					}
					break;

				default:
					goto loop8;
				}
			}

			loop8:
				;

			} finally { DebugExitSubRule(8); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("select", 6);
			LeaveRule("select", 6);
			LeaveRule_select();
		}
		DebugLocation(48, 90);
		} finally { DebugExitRule(GrammarFileName, "select"); }
		return retval;

	}
	// $ANTLR end "select"

	partial void EnterRule_asexp();
	partial void LeaveRule_asexp();
	// $ANTLR start "asexp"
	// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:50:1: asexp : AS ^ SPACE ! IDENTIFIER ;
	[GrammarRule("asexp")]
	private AstParserRuleReturnScope<object, IToken> asexp()
	{
		EnterRule_asexp();
		EnterRule("asexp", 7);
		TraceIn("asexp", 7);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken AS27 = default(IToken);
		IToken SPACE28 = default(IToken);
		IToken IDENTIFIER29 = default(IToken);

		object AS27_tree = default(object);
		object SPACE28_tree = default(object);
		object IDENTIFIER29_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "asexp");
		DebugLocation(50, 24);
		try
		{
			// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:51:2: ( AS ^ SPACE ! IDENTIFIER )
			DebugEnterAlt(1);
			// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:51:4: AS ^ SPACE ! IDENTIFIER
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(51, 6);
			AS27=(IToken)Match(input,AS,Follow._AS_in_asexp221); 
			AS27_tree = (object)adaptor.Create(AS27);
			root_0 = (object)adaptor.BecomeRoot(AS27_tree, root_0);
			DebugLocation(51, 13);
			SPACE28=(IToken)Match(input,SPACE,Follow._SPACE_in_asexp224); 
			DebugLocation(51, 15);
			IDENTIFIER29=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_asexp227); 
			IDENTIFIER29_tree = (object)adaptor.Create(IDENTIFIER29);
			adaptor.AddChild(root_0, IDENTIFIER29_tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("asexp", 7);
			LeaveRule("asexp", 7);
			LeaveRule_asexp();
		}
		DebugLocation(51, 24);
		} finally { DebugExitRule(GrammarFileName, "asexp"); }
		return retval;

	}
	// $ANTLR end "asexp"

	partial void EnterRule_apply();
	partial void LeaveRule_apply();
	// $ANTLR start "apply"
	// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:53:1: apply : APPLY ^ aggexpr ;
	[GrammarRule("apply")]
	private AstParserRuleReturnScope<object, IToken> apply()
	{
		EnterRule_apply();
		EnterRule("apply", 8);
		TraceIn("apply", 8);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken APPLY30 = default(IToken);
		AstParserRuleReturnScope<object, IToken> aggexpr31 = default(AstParserRuleReturnScope<object, IToken>);

		object APPLY30_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "apply");
		DebugLocation(53, 17);
		try
		{
			// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:54:2: ( APPLY ^ aggexpr )
			DebugEnterAlt(1);
			// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:54:4: APPLY ^ aggexpr
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(54, 9);
			APPLY30=(IToken)Match(input,APPLY,Follow._APPLY_in_apply236); 
			APPLY30_tree = (object)adaptor.Create(APPLY30);
			root_0 = (object)adaptor.BecomeRoot(APPLY30_tree, root_0);
			DebugLocation(54, 11);
			PushFollow(Follow._aggexpr_in_apply239);
			aggexpr31=aggexpr();
			PopFollow();

			adaptor.AddChild(root_0, aggexpr31.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("apply", 8);
			LeaveRule("apply", 8);
			LeaveRule_apply();
		}
		DebugLocation(54, 17);
		} finally { DebugExitRule(GrammarFileName, "apply"); }
		return retval;

	}
	// $ANTLR end "apply"

	partial void EnterRule_aggexpr();
	partial void LeaveRule_aggexpr();
	// $ANTLR start "aggexpr"
	// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:56:1: aggexpr : applyTrafo ( '/' ! applyTrafo )* ;
	[GrammarRule("aggexpr")]
	private AstParserRuleReturnScope<object, IToken> aggexpr()
	{
		EnterRule_aggexpr();
		EnterRule("aggexpr", 9);
		TraceIn("aggexpr", 9);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken char_literal33 = default(IToken);
		AstParserRuleReturnScope<object, IToken> applyTrafo32 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> applyTrafo34 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal33_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "aggexpr");
		DebugLocation(56, 32);
		try
		{
			// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:57:2: ( applyTrafo ( '/' ! applyTrafo )* )
			DebugEnterAlt(1);
			// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:57:4: applyTrafo ( '/' ! applyTrafo )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(57, 4);
			PushFollow(Follow._applyTrafo_in_aggexpr248);
			applyTrafo32=applyTrafo();
			PopFollow();

			adaptor.AddChild(root_0, applyTrafo32.Tree);
			DebugLocation(57, 15);
			// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:57:15: ( '/' ! applyTrafo )*
			try { DebugEnterSubRule(9);
			while (true)
			{
				int alt9=2;
				try { DebugEnterDecision(9, false);
				int LA9_1 = input.LA(1);

				if ((LA9_1==78))
				{
					alt9 = 1;
				}


				} finally { DebugExitDecision(9); }
				switch ( alt9 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:57:16: '/' ! applyTrafo
					{
					DebugLocation(57, 19);
					char_literal33=(IToken)Match(input,78,Follow._78_in_aggexpr251); 
					DebugLocation(57, 21);
					PushFollow(Follow._applyTrafo_in_aggexpr254);
					applyTrafo34=applyTrafo();
					PopFollow();

					adaptor.AddChild(root_0, applyTrafo34.Tree);

					}
					break;

				default:
					goto loop9;
				}
			}

			loop9:
				;

			} finally { DebugExitSubRule(9); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("aggexpr", 9);
			LeaveRule("aggexpr", 9);
			LeaveRule_aggexpr();
		}
		DebugLocation(57, 32);
		} finally { DebugExitRule(GrammarFileName, "aggexpr"); }
		return retval;

	}
	// $ANTLR end "aggexpr"

	partial void EnterRule_applyTrafo();
	partial void LeaveRule_applyTrafo();
	// $ANTLR start "applyTrafo"
	// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:59:1: applyTrafo : aggregateTrafo ;
	[GrammarRule("applyTrafo")]
	private AstParserRuleReturnScope<object, IToken> applyTrafo()
	{
		EnterRule_applyTrafo();
		EnterRule("applyTrafo", 10);
		TraceIn("applyTrafo", 10);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		AstParserRuleReturnScope<object, IToken> aggregateTrafo35 = default(AstParserRuleReturnScope<object, IToken>);

		try { DebugEnterRule(GrammarFileName, "applyTrafo");
		DebugLocation(59, 17);
		try
		{
			// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:60:2: ( aggregateTrafo )
			DebugEnterAlt(1);
			// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:60:4: aggregateTrafo
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(60, 4);
			PushFollow(Follow._aggregateTrafo_in_applyTrafo265);
			aggregateTrafo35=aggregateTrafo();
			PopFollow();

			adaptor.AddChild(root_0, aggregateTrafo35.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("applyTrafo", 10);
			LeaveRule("applyTrafo", 10);
			LeaveRule_applyTrafo();
		}
		DebugLocation(60, 17);
		} finally { DebugExitRule(GrammarFileName, "applyTrafo"); }
		return retval;

	}
	// $ANTLR end "applyTrafo"

	partial void EnterRule_aggregateTrafo();
	partial void LeaveRule_aggregateTrafo();
	// $ANTLR start "aggregateTrafo"
	// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:62:1: aggregateTrafo : AGGREGATE ^ '(' aggregateExpr ( ',' ! aggregateExpr )* ')' ;
	[GrammarRule("aggregateTrafo")]
	private AstParserRuleReturnScope<object, IToken> aggregateTrafo()
	{
		EnterRule_aggregateTrafo();
		EnterRule("aggregateTrafo", 11);
		TraceIn("aggregateTrafo", 11);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken AGGREGATE36 = default(IToken);
		IToken char_literal37 = default(IToken);
		IToken char_literal39 = default(IToken);
		IToken char_literal41 = default(IToken);
		AstParserRuleReturnScope<object, IToken> aggregateExpr38 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> aggregateExpr40 = default(AstParserRuleReturnScope<object, IToken>);

		object AGGREGATE36_tree = default(object);
		object char_literal37_tree = default(object);
		object char_literal39_tree = default(object);
		object char_literal41_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "aggregateTrafo");
		DebugLocation(62, 56);
		try
		{
			// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:63:2: ( AGGREGATE ^ '(' aggregateExpr ( ',' ! aggregateExpr )* ')' )
			DebugEnterAlt(1);
			// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:63:4: AGGREGATE ^ '(' aggregateExpr ( ',' ! aggregateExpr )* ')'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(63, 13);
			AGGREGATE36=(IToken)Match(input,AGGREGATE,Follow._AGGREGATE_in_aggregateTrafo274); 
			AGGREGATE36_tree = (object)adaptor.Create(AGGREGATE36);
			root_0 = (object)adaptor.BecomeRoot(AGGREGATE36_tree, root_0);
			DebugLocation(63, 15);
			char_literal37=(IToken)Match(input,75,Follow._75_in_aggregateTrafo277); 
			char_literal37_tree = (object)adaptor.Create(char_literal37);
			adaptor.AddChild(root_0, char_literal37_tree);
			DebugLocation(63, 19);
			PushFollow(Follow._aggregateExpr_in_aggregateTrafo279);
			aggregateExpr38=aggregateExpr();
			PopFollow();

			adaptor.AddChild(root_0, aggregateExpr38.Tree);
			DebugLocation(63, 33);
			// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:63:33: ( ',' ! aggregateExpr )*
			try { DebugEnterSubRule(10);
			while (true)
			{
				int alt10=2;
				try { DebugEnterDecision(10, false);
				int LA10_1 = input.LA(1);

				if ((LA10_1==77))
				{
					alt10 = 1;
				}


				} finally { DebugExitDecision(10); }
				switch ( alt10 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:63:34: ',' ! aggregateExpr
					{
					DebugLocation(63, 37);
					char_literal39=(IToken)Match(input,77,Follow._77_in_aggregateTrafo282); 
					DebugLocation(63, 39);
					PushFollow(Follow._aggregateExpr_in_aggregateTrafo285);
					aggregateExpr40=aggregateExpr();
					PopFollow();

					adaptor.AddChild(root_0, aggregateExpr40.Tree);

					}
					break;

				default:
					goto loop10;
				}
			}

			loop10:
				;

			} finally { DebugExitSubRule(10); }

			DebugLocation(63, 54);
			char_literal41=(IToken)Match(input,76,Follow._76_in_aggregateTrafo288); 
			char_literal41_tree = (object)adaptor.Create(char_literal41);
			adaptor.AddChild(root_0, char_literal41_tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("aggregateTrafo", 11);
			LeaveRule("aggregateTrafo", 11);
			LeaveRule_aggregateTrafo();
		}
		DebugLocation(63, 56);
		} finally { DebugExitRule(GrammarFileName, "aggregateTrafo"); }
		return retval;

	}
	// $ANTLR end "aggregateTrafo"

	partial void EnterRule_aggregateExpr();
	partial void LeaveRule_aggregateExpr();
	// $ANTLR start "aggregateExpr"
	// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:65:1: aggregateExpr : propertyname[false] SPACE ! aggregateWith SPACE ! asexp ;
	[GrammarRule("aggregateExpr")]
	private AstParserRuleReturnScope<object, IToken> aggregateExpr()
	{
		EnterRule_aggregateExpr();
		EnterRule("aggregateExpr", 12);
		TraceIn("aggregateExpr", 12);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken SPACE43 = default(IToken);
		IToken SPACE45 = default(IToken);
		AstParserRuleReturnScope<object, IToken> propertyname42 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> aggregateWith44 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> asexp46 = default(AstParserRuleReturnScope<object, IToken>);

		object SPACE43_tree = default(object);
		object SPACE45_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "aggregateExpr");
		DebugLocation(65, 56);
		try
		{
			// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:66:2: ( propertyname[false] SPACE ! aggregateWith SPACE ! asexp )
			DebugEnterAlt(1);
			// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:66:4: propertyname[false] SPACE ! aggregateWith SPACE ! asexp
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(66, 4);
			PushFollow(Follow._propertyname_in_aggregateExpr297);
			propertyname42=propertyname(false);
			PopFollow();

			adaptor.AddChild(root_0, propertyname42.Tree);
			DebugLocation(66, 29);
			SPACE43=(IToken)Match(input,SPACE,Follow._SPACE_in_aggregateExpr300); 
			DebugLocation(66, 31);
			PushFollow(Follow._aggregateWith_in_aggregateExpr303);
			aggregateWith44=aggregateWith();
			PopFollow();

			adaptor.AddChild(root_0, aggregateWith44.Tree);
			DebugLocation(66, 50);
			SPACE45=(IToken)Match(input,SPACE,Follow._SPACE_in_aggregateExpr305); 
			DebugLocation(66, 52);
			PushFollow(Follow._asexp_in_aggregateExpr308);
			asexp46=asexp();
			PopFollow();

			adaptor.AddChild(root_0, asexp46.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("aggregateExpr", 12);
			LeaveRule("aggregateExpr", 12);
			LeaveRule_aggregateExpr();
		}
		DebugLocation(66, 56);
		} finally { DebugExitRule(GrammarFileName, "aggregateExpr"); }
		return retval;

	}
	// $ANTLR end "aggregateExpr"

	partial void EnterRule_aggregateWith();
	partial void LeaveRule_aggregateWith();
	// $ANTLR start "aggregateWith"
	// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:68:1: aggregateWith : WITH ^ SPACE ! aggregateMethod ;
	[GrammarRule("aggregateWith")]
	private AstParserRuleReturnScope<object, IToken> aggregateWith()
	{
		EnterRule_aggregateWith();
		EnterRule("aggregateWith", 13);
		TraceIn("aggregateWith", 13);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken WITH47 = default(IToken);
		IToken SPACE48 = default(IToken);
		AstParserRuleReturnScope<object, IToken> aggregateMethod49 = default(AstParserRuleReturnScope<object, IToken>);

		object WITH47_tree = default(object);
		object SPACE48_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "aggregateWith");
		DebugLocation(68, 31);
		try
		{
			// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:69:2: ( WITH ^ SPACE ! aggregateMethod )
			DebugEnterAlt(1);
			// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:69:4: WITH ^ SPACE ! aggregateMethod
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(69, 8);
			WITH47=(IToken)Match(input,WITH,Follow._WITH_in_aggregateWith318); 
			WITH47_tree = (object)adaptor.Create(WITH47);
			root_0 = (object)adaptor.BecomeRoot(WITH47_tree, root_0);
			DebugLocation(69, 15);
			SPACE48=(IToken)Match(input,SPACE,Follow._SPACE_in_aggregateWith321); 
			DebugLocation(69, 17);
			PushFollow(Follow._aggregateMethod_in_aggregateWith324);
			aggregateMethod49=aggregateMethod();
			PopFollow();

			adaptor.AddChild(root_0, aggregateMethod49.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("aggregateWith", 13);
			LeaveRule("aggregateWith", 13);
			LeaveRule_aggregateWith();
		}
		DebugLocation(69, 31);
		} finally { DebugExitRule(GrammarFileName, "aggregateWith"); }
		return retval;

	}
	// $ANTLR end "aggregateWith"

	partial void EnterRule_aggregateMethod();
	partial void LeaveRule_aggregateMethod();
	// $ANTLR start "aggregateMethod"
	// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:71:1: aggregateMethod : ( MAX | MIN | SUM | AVERAGE );
	[GrammarRule("aggregateMethod")]
	private AstParserRuleReturnScope<object, IToken> aggregateMethod()
	{
		EnterRule_aggregateMethod();
		EnterRule("aggregateMethod", 14);
		TraceIn("aggregateMethod", 14);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken set50 = default(IToken);

		object set50_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "aggregateMethod");
		DebugLocation(71, 28);
		try
		{
			// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:72:2: ( MAX | MIN | SUM | AVERAGE )
			DebugEnterAlt(1);
			// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(72, 2);

			set50=(IToken)input.LT(1);
			if (input.LA(1)==AVERAGE||(input.LA(1)>=MAX && input.LA(1)<=MIN)||input.LA(1)==SUM)
			{
				input.Consume();
				adaptor.AddChild(root_0, (object)adaptor.Create(set50));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("aggregateMethod", 14);
			LeaveRule("aggregateMethod", 14);
			LeaveRule_aggregateMethod();
		}
		DebugLocation(72, 28);
		} finally { DebugExitRule(GrammarFileName, "aggregateMethod"); }
		return retval;

	}
	// $ANTLR end "aggregateMethod"

	partial void EnterRule_expand();
	partial void LeaveRule_expand();
	// $ANTLR start "expand"
	// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:74:1: expand : EXPAND ^ propertyname[false] ( ',' ! propertyname[false] )* ;
	[GrammarRule("expand")]
	private AstParserRuleReturnScope<object, IToken> expand()
	{
		EnterRule_expand();
		EnterRule("expand", 15);
		TraceIn("expand", 15);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken EXPAND51 = default(IToken);
		IToken char_literal53 = default(IToken);
		AstParserRuleReturnScope<object, IToken> propertyname52 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> propertyname54 = default(AstParserRuleReturnScope<object, IToken>);

		object EXPAND51_tree = default(object);
		object char_literal53_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "expand");
		DebugLocation(74, 58);
		try
		{
			// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:75:2: ( EXPAND ^ propertyname[false] ( ',' ! propertyname[false] )* )
			DebugEnterAlt(1);
			// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:75:4: EXPAND ^ propertyname[false] ( ',' ! propertyname[false] )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(75, 10);
			EXPAND51=(IToken)Match(input,EXPAND,Follow._EXPAND_in_expand354); 
			EXPAND51_tree = (object)adaptor.Create(EXPAND51);
			root_0 = (object)adaptor.BecomeRoot(EXPAND51_tree, root_0);
			DebugLocation(75, 12);
			PushFollow(Follow._propertyname_in_expand357);
			propertyname52=propertyname(false);
			PopFollow();

			adaptor.AddChild(root_0, propertyname52.Tree);
			DebugLocation(75, 32);
			// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:75:32: ( ',' ! propertyname[false] )*
			try { DebugEnterSubRule(11);
			while (true)
			{
				int alt11=2;
				try { DebugEnterDecision(11, false);
				int LA11_1 = input.LA(1);

				if ((LA11_1==77))
				{
					alt11 = 1;
				}


				} finally { DebugExitDecision(11); }
				switch ( alt11 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:75:33: ',' ! propertyname[false]
					{
					DebugLocation(75, 36);
					char_literal53=(IToken)Match(input,77,Follow._77_in_expand361); 
					DebugLocation(75, 38);
					PushFollow(Follow._propertyname_in_expand364);
					propertyname54=propertyname(false);
					PopFollow();

					adaptor.AddChild(root_0, propertyname54.Tree);

					}
					break;

				default:
					goto loop11;
				}
			}

			loop11:
				;

			} finally { DebugExitSubRule(11); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expand", 15);
			LeaveRule("expand", 15);
			LeaveRule_expand();
		}
		DebugLocation(75, 58);
		} finally { DebugExitRule(GrammarFileName, "expand"); }
		return retval;

	}
	// $ANTLR end "expand"

	partial void EnterRule_inlinecount();
	partial void LeaveRule_inlinecount();
	// $ANTLR start "inlinecount"
	// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:77:1: inlinecount : ( INLINECOUNT ^ ALLPAGES | INLINECOUNT NONE ->);
	[GrammarRule("inlinecount")]
	private AstParserRuleReturnScope<object, IToken> inlinecount()
	{
		EnterRule_inlinecount();
		EnterRule("inlinecount", 16);
		TraceIn("inlinecount", 16);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken INLINECOUNT55 = default(IToken);
		IToken ALLPAGES56 = default(IToken);
		IToken INLINECOUNT57 = default(IToken);
		IToken NONE58 = default(IToken);

		object INLINECOUNT55_tree = default(object);
		object ALLPAGES56_tree = default(object);
		object INLINECOUNT57_tree = default(object);
		object NONE58_tree = default(object);
		RewriteRuleITokenStream stream_INLINECOUNT=new RewriteRuleITokenStream(adaptor,"token INLINECOUNT");
		RewriteRuleITokenStream stream_NONE=new RewriteRuleITokenStream(adaptor,"token NONE");
		try { DebugEnterRule(GrammarFileName, "inlinecount");
		DebugLocation(77, 22);
		try
		{
			// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:78:2: ( INLINECOUNT ^ ALLPAGES | INLINECOUNT NONE ->)
			int alt12=2;
			try { DebugEnterDecision(12, false);
			int LA12_1 = input.LA(1);

			if ((LA12_1==INLINECOUNT))
			{
				int LA12_2 = input.LA(2);

				if ((LA12_2==ALLPAGES))
				{
					alt12 = 1;
				}
				else if ((LA12_2==NONE))
				{
					alt12 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 12, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 12, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(12); }
			switch (alt12)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:78:4: INLINECOUNT ^ ALLPAGES
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(78, 15);
				INLINECOUNT55=(IToken)Match(input,INLINECOUNT,Follow._INLINECOUNT_in_inlinecount376); 
				INLINECOUNT55_tree = (object)adaptor.Create(INLINECOUNT55);
				root_0 = (object)adaptor.BecomeRoot(INLINECOUNT55_tree, root_0);
				DebugLocation(78, 17);
				ALLPAGES56=(IToken)Match(input,ALLPAGES,Follow._ALLPAGES_in_inlinecount379); 
				ALLPAGES56_tree = (object)adaptor.Create(ALLPAGES56);
				adaptor.AddChild(root_0, ALLPAGES56_tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:79:4: INLINECOUNT NONE
				{
				DebugLocation(79, 4);
				INLINECOUNT57=(IToken)Match(input,INLINECOUNT,Follow._INLINECOUNT_in_inlinecount384);  
				stream_INLINECOUNT.Add(INLINECOUNT57);

				DebugLocation(79, 16);
				NONE58=(IToken)Match(input,NONE,Follow._NONE_in_inlinecount386);  
				stream_NONE.Add(NONE58);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 79:21: ->
				{
					DebugLocation(79, 23);
					root_0 = null;
				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("inlinecount", 16);
			LeaveRule("inlinecount", 16);
			LeaveRule_inlinecount();
		}
		DebugLocation(79, 22);
		} finally { DebugExitRule(GrammarFileName, "inlinecount"); }
		return retval;

	}
	// $ANTLR end "inlinecount"

	partial void EnterRule_ignored();
	partial void LeaveRule_ignored();
	// $ANTLR start "ignored"
	// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:81:1: ignored : IGNORED IDENTIFIER -> IGNORED ;
	[GrammarRule("ignored")]
	private AstParserRuleReturnScope<object, IToken> ignored()
	{
		EnterRule_ignored();
		EnterRule("ignored", 17);
		TraceIn("ignored", 17);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken IGNORED59 = default(IToken);
		IToken IDENTIFIER60 = default(IToken);

		object IGNORED59_tree = default(object);
		object IDENTIFIER60_tree = default(object);
		RewriteRuleITokenStream stream_IGNORED=new RewriteRuleITokenStream(adaptor,"token IGNORED");
		RewriteRuleITokenStream stream_IDENTIFIER=new RewriteRuleITokenStream(adaptor,"token IDENTIFIER");
		try { DebugEnterRule(GrammarFileName, "ignored");
		DebugLocation(81, 39);
		try
		{
			// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:81:9: ( IGNORED IDENTIFIER -> IGNORED )
			DebugEnterAlt(1);
			// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:81:11: IGNORED IDENTIFIER
			{
			DebugLocation(81, 11);
			IGNORED59=(IToken)Match(input,IGNORED,Follow._IGNORED_in_ignored396);  
			stream_IGNORED.Add(IGNORED59);

			DebugLocation(81, 19);
			IDENTIFIER60=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_ignored398);  
			stream_IDENTIFIER.Add(IDENTIFIER60);



			{
			// AST REWRITE
			// elements: IGNORED
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 81:30: -> IGNORED
			{
				DebugLocation(81, 33);
				adaptor.AddChild(root_0, stream_IGNORED.NextNode());

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("ignored", 17);
			LeaveRule("ignored", 17);
			LeaveRule_ignored();
		}
		DebugLocation(81, 39);
		} finally { DebugExitRule(GrammarFileName, "ignored"); }
		return retval;

	}
	// $ANTLR end "ignored"

	partial void EnterRule_filterexpression();
	partial void LeaveRule_filterexpression();
	// $ANTLR start "filterexpression"
	// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:83:1: filterexpression[bool subquery] : orexpression[subquery] ( SPACE ! OR ^ SPACE ! orexpression[subquery] )* ;
	[GrammarRule("filterexpression")]
	private AstParserRuleReturnScope<object, IToken> filterexpression(bool subquery)
	{
		EnterRule_filterexpression();
		EnterRule("filterexpression", 18);
		TraceIn("filterexpression", 18);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken SPACE62 = default(IToken);
		IToken OR63 = default(IToken);
		IToken SPACE64 = default(IToken);
		AstParserRuleReturnScope<object, IToken> orexpression61 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> orexpression65 = default(AstParserRuleReturnScope<object, IToken>);

		object SPACE62_tree = default(object);
		object OR63_tree = default(object);
		object SPACE64_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "filterexpression");
		DebugLocation(83, 69);
		try
		{
			// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:84:2: ( orexpression[subquery] ( SPACE ! OR ^ SPACE ! orexpression[subquery] )* )
			DebugEnterAlt(1);
			// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:84:4: orexpression[subquery] ( SPACE ! OR ^ SPACE ! orexpression[subquery] )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(84, 4);
			PushFollow(Follow._orexpression_in_filterexpression412);
			orexpression61=orexpression(subquery);
			PopFollow();

			adaptor.AddChild(root_0, orexpression61.Tree);
			DebugLocation(84, 27);
			// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:84:27: ( SPACE ! OR ^ SPACE ! orexpression[subquery] )*
			try { DebugEnterSubRule(13);
			while (true)
			{
				int alt13=2;
				try { DebugEnterDecision(13, false);
				int LA13_1 = input.LA(1);

				if ((LA13_1==SPACE))
				{
					alt13 = 1;
				}


				} finally { DebugExitDecision(13); }
				switch ( alt13 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:84:28: SPACE ! OR ^ SPACE ! orexpression[subquery]
					{
					DebugLocation(84, 33);
					SPACE62=(IToken)Match(input,SPACE,Follow._SPACE_in_filterexpression416); 
					DebugLocation(84, 37);
					OR63=(IToken)Match(input,OR,Follow._OR_in_filterexpression419); 
					OR63_tree = (object)adaptor.Create(OR63);
					root_0 = (object)adaptor.BecomeRoot(OR63_tree, root_0);
					DebugLocation(84, 44);
					SPACE64=(IToken)Match(input,SPACE,Follow._SPACE_in_filterexpression422); 
					DebugLocation(84, 46);
					PushFollow(Follow._orexpression_in_filterexpression425);
					orexpression65=orexpression(subquery);
					PopFollow();

					adaptor.AddChild(root_0, orexpression65.Tree);

					}
					break;

				default:
					goto loop13;
				}
			}

			loop13:
				;

			} finally { DebugExitSubRule(13); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("filterexpression", 18);
			LeaveRule("filterexpression", 18);
			LeaveRule_filterexpression();
		}
		DebugLocation(84, 69);
		} finally { DebugExitRule(GrammarFileName, "filterexpression"); }
		return retval;

	}
	// $ANTLR end "filterexpression"

	partial void EnterRule_orexpression();
	partial void LeaveRule_orexpression();
	// $ANTLR start "orexpression"
	// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:86:1: orexpression[bool subquery] : andexpression[subquery] ( SPACE ! AND ^ SPACE ! andexpression[subquery] )* ;
	[GrammarRule("orexpression")]
	private AstParserRuleReturnScope<object, IToken> orexpression(bool subquery)
	{
		EnterRule_orexpression();
		EnterRule("orexpression", 19);
		TraceIn("orexpression", 19);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken SPACE67 = default(IToken);
		IToken AND68 = default(IToken);
		IToken SPACE69 = default(IToken);
		AstParserRuleReturnScope<object, IToken> andexpression66 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> andexpression70 = default(AstParserRuleReturnScope<object, IToken>);

		object SPACE67_tree = default(object);
		object AND68_tree = default(object);
		object SPACE69_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "orexpression");
		DebugLocation(86, 72);
		try
		{
			// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:87:2: ( andexpression[subquery] ( SPACE ! AND ^ SPACE ! andexpression[subquery] )* )
			DebugEnterAlt(1);
			// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:87:4: andexpression[subquery] ( SPACE ! AND ^ SPACE ! andexpression[subquery] )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(87, 4);
			PushFollow(Follow._andexpression_in_orexpression439);
			andexpression66=andexpression(subquery);
			PopFollow();

			adaptor.AddChild(root_0, andexpression66.Tree);
			DebugLocation(87, 28);
			// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:87:28: ( SPACE ! AND ^ SPACE ! andexpression[subquery] )*
			try { DebugEnterSubRule(14);
			while (true)
			{
				int alt14=2;
				try { DebugEnterDecision(14, false);
				int LA14_1 = input.LA(1);

				if ((LA14_1==SPACE))
				{
					int LA14_2 = input.LA(2);

					if ((LA14_2==AND))
					{
						alt14 = 1;
					}


				}


				} finally { DebugExitDecision(14); }
				switch ( alt14 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:87:29: SPACE ! AND ^ SPACE ! andexpression[subquery]
					{
					DebugLocation(87, 34);
					SPACE67=(IToken)Match(input,SPACE,Follow._SPACE_in_orexpression443); 
					DebugLocation(87, 39);
					AND68=(IToken)Match(input,AND,Follow._AND_in_orexpression446); 
					AND68_tree = (object)adaptor.Create(AND68);
					root_0 = (object)adaptor.BecomeRoot(AND68_tree, root_0);
					DebugLocation(87, 46);
					SPACE69=(IToken)Match(input,SPACE,Follow._SPACE_in_orexpression449); 
					DebugLocation(87, 48);
					PushFollow(Follow._andexpression_in_orexpression452);
					andexpression70=andexpression(subquery);
					PopFollow();

					adaptor.AddChild(root_0, andexpression70.Tree);

					}
					break;

				default:
					goto loop14;
				}
			}

			loop14:
				;

			} finally { DebugExitSubRule(14); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("orexpression", 19);
			LeaveRule("orexpression", 19);
			LeaveRule_orexpression();
		}
		DebugLocation(87, 72);
		} finally { DebugExitRule(GrammarFileName, "orexpression"); }
		return retval;

	}
	// $ANTLR end "orexpression"

	partial void EnterRule_andexpression();
	partial void LeaveRule_andexpression();
	// $ANTLR start "andexpression"
	// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:89:1: andexpression[bool subquery] : ( NOT ^ SPACE ( '(' filterexpression[subquery] ')' | booleanexpression[subquery] ) | ( '(' filterexpression[subquery] ')' | booleanexpression[subquery] ) );
	[GrammarRule("andexpression")]
	private AstParserRuleReturnScope<object, IToken> andexpression(bool subquery)
	{
		EnterRule_andexpression();
		EnterRule("andexpression", 20);
		TraceIn("andexpression", 20);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken NOT71 = default(IToken);
		IToken SPACE72 = default(IToken);
		IToken char_literal73 = default(IToken);
		IToken char_literal75 = default(IToken);
		IToken char_literal77 = default(IToken);
		IToken char_literal79 = default(IToken);
		AstParserRuleReturnScope<object, IToken> filterexpression74 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> booleanexpression76 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> filterexpression78 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> booleanexpression80 = default(AstParserRuleReturnScope<object, IToken>);

		object NOT71_tree = default(object);
		object SPACE72_tree = default(object);
		object char_literal73_tree = default(object);
		object char_literal75_tree = default(object);
		object char_literal77_tree = default(object);
		object char_literal79_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "andexpression");
		DebugLocation(89, 69);
		try
		{
			// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:90:2: ( NOT ^ SPACE ( '(' filterexpression[subquery] ')' | booleanexpression[subquery] ) | ( '(' filterexpression[subquery] ')' | booleanexpression[subquery] ) )
			int alt17=2;
			try { DebugEnterDecision(17, false);
			int LA17_1 = input.LA(1);

			if ((LA17_1==NOT))
			{
				alt17 = 1;
			}
			else if (((LA17_1>=BOOL && LA17_1<=BYTE)||(LA17_1>=DATETIME && LA17_1<=DECIMAL)||(LA17_1>=DOUBLE && LA17_1<=ENDSWITH)||LA17_1==GUID||(LA17_1>=HOUR && LA17_1<=IDENTIFIER)||LA17_1==INT||LA17_1==LONG||(LA17_1>=MINUTE && LA17_1<=MONTH)||LA17_1==NULL||(LA17_1>=SECOND && LA17_1<=SECONDS)||LA17_1==SINGLE||(LA17_1>=STARTSWITH && LA17_1<=SUBSTRINGOF)||LA17_1==TOLOWER||LA17_1==TOUPPER||(LA17_1>=YEAR && LA17_1<=YEARS)||LA17_1==75))
			{
				alt17 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 17, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(17); }
			switch (alt17)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:90:4: NOT ^ SPACE ( '(' filterexpression[subquery] ')' | booleanexpression[subquery] )
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(90, 7);
				NOT71=(IToken)Match(input,NOT,Follow._NOT_in_andexpression466); 
				NOT71_tree = (object)adaptor.Create(NOT71);
				root_0 = (object)adaptor.BecomeRoot(NOT71_tree, root_0);
				DebugLocation(90, 9);
				SPACE72=(IToken)Match(input,SPACE,Follow._SPACE_in_andexpression469); 
				SPACE72_tree = (object)adaptor.Create(SPACE72);
				adaptor.AddChild(root_0, SPACE72_tree);
				DebugLocation(90, 15);
				// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:90:15: ( '(' filterexpression[subquery] ')' | booleanexpression[subquery] )
				int alt15=2;
				try { DebugEnterSubRule(15);
				try { DebugEnterDecision(15, false);
				int LA15_1 = input.LA(1);

				if ((LA15_1==75))
				{
					alt15 = 1;
				}
				else if (((LA15_1>=BOOL && LA15_1<=BYTE)||(LA15_1>=DATETIME && LA15_1<=DECIMAL)||(LA15_1>=DOUBLE && LA15_1<=ENDSWITH)||LA15_1==GUID||(LA15_1>=HOUR && LA15_1<=IDENTIFIER)||LA15_1==INT||LA15_1==LONG||(LA15_1>=MINUTE && LA15_1<=MONTH)||LA15_1==NULL||(LA15_1>=SECOND && LA15_1<=SECONDS)||LA15_1==SINGLE||(LA15_1>=STARTSWITH && LA15_1<=SUBSTRINGOF)||LA15_1==TOLOWER||LA15_1==TOUPPER||(LA15_1>=YEAR && LA15_1<=YEARS)))
				{
					alt15 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 15, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(15); }
				switch (alt15)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:90:16: '(' filterexpression[subquery] ')'
					{
					DebugLocation(90, 16);
					char_literal73=(IToken)Match(input,75,Follow._75_in_andexpression472); 
					char_literal73_tree = (object)adaptor.Create(char_literal73);
					adaptor.AddChild(root_0, char_literal73_tree);
					DebugLocation(90, 20);
					PushFollow(Follow._filterexpression_in_andexpression474);
					filterexpression74=filterexpression(subquery);
					PopFollow();

					adaptor.AddChild(root_0, filterexpression74.Tree);
					DebugLocation(90, 47);
					char_literal75=(IToken)Match(input,76,Follow._76_in_andexpression477); 
					char_literal75_tree = (object)adaptor.Create(char_literal75);
					adaptor.AddChild(root_0, char_literal75_tree);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:90:53: booleanexpression[subquery]
					{
					DebugLocation(90, 53);
					PushFollow(Follow._booleanexpression_in_andexpression481);
					booleanexpression76=booleanexpression(subquery);
					PopFollow();

					adaptor.AddChild(root_0, booleanexpression76.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(15); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:91:4: ( '(' filterexpression[subquery] ')' | booleanexpression[subquery] )
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(91, 4);
				// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:91:4: ( '(' filterexpression[subquery] ')' | booleanexpression[subquery] )
				int alt16=2;
				try { DebugEnterSubRule(16);
				try { DebugEnterDecision(16, false);
				int LA16_1 = input.LA(1);

				if ((LA16_1==75))
				{
					alt16 = 1;
				}
				else if (((LA16_1>=BOOL && LA16_1<=BYTE)||(LA16_1>=DATETIME && LA16_1<=DECIMAL)||(LA16_1>=DOUBLE && LA16_1<=ENDSWITH)||LA16_1==GUID||(LA16_1>=HOUR && LA16_1<=IDENTIFIER)||LA16_1==INT||LA16_1==LONG||(LA16_1>=MINUTE && LA16_1<=MONTH)||LA16_1==NULL||(LA16_1>=SECOND && LA16_1<=SECONDS)||LA16_1==SINGLE||(LA16_1>=STARTSWITH && LA16_1<=SUBSTRINGOF)||LA16_1==TOLOWER||LA16_1==TOUPPER||(LA16_1>=YEAR && LA16_1<=YEARS)))
				{
					alt16 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 16, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(16); }
				switch (alt16)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:91:5: '(' filterexpression[subquery] ')'
					{
					DebugLocation(91, 5);
					char_literal77=(IToken)Match(input,75,Follow._75_in_andexpression489); 
					char_literal77_tree = (object)adaptor.Create(char_literal77);
					adaptor.AddChild(root_0, char_literal77_tree);
					DebugLocation(91, 9);
					PushFollow(Follow._filterexpression_in_andexpression491);
					filterexpression78=filterexpression(subquery);
					PopFollow();

					adaptor.AddChild(root_0, filterexpression78.Tree);
					DebugLocation(91, 36);
					char_literal79=(IToken)Match(input,76,Follow._76_in_andexpression494); 
					char_literal79_tree = (object)adaptor.Create(char_literal79);
					adaptor.AddChild(root_0, char_literal79_tree);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:91:42: booleanexpression[subquery]
					{
					DebugLocation(91, 42);
					PushFollow(Follow._booleanexpression_in_andexpression498);
					booleanexpression80=booleanexpression(subquery);
					PopFollow();

					adaptor.AddChild(root_0, booleanexpression80.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(16); }


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("andexpression", 20);
			LeaveRule("andexpression", 20);
			LeaveRule_andexpression();
		}
		DebugLocation(91, 69);
		} finally { DebugExitRule(GrammarFileName, "andexpression"); }
		return retval;

	}
	// $ANTLR end "andexpression"

	partial void EnterRule_booleanexpression();
	partial void LeaveRule_booleanexpression();
	// $ANTLR start "booleanexpression"
	// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:93:1: booleanexpression[bool subquery] : atom1= atom[subquery] ( SPACE (op= EQUALS |op= NOTEQUALS |op= GREATERTHAN |op= GREATERTHANOREQUAL |op= LESSTHAN |op= LESSTHANOREQUAL ) SPACE atom2= atom[subquery] -> ^( $op $atom1 $atom2) | -> ^( EQUALS[\"eq\"] $atom1 BOOL[\"true\"] ) ) ;
	[GrammarRule("booleanexpression")]
	private AstParserRuleReturnScope<object, IToken> booleanexpression(bool subquery)
	{
		EnterRule_booleanexpression();
		EnterRule("booleanexpression", 21);
		TraceIn("booleanexpression", 21);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken op = default(IToken);
		IToken SPACE81 = default(IToken);
		IToken SPACE82 = default(IToken);
		AstParserRuleReturnScope<object, IToken> atom1 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> atom2 = default(AstParserRuleReturnScope<object, IToken>);

		object op_tree = default(object);
		object SPACE81_tree = default(object);
		object SPACE82_tree = default(object);
		RewriteRuleITokenStream stream_SPACE=new RewriteRuleITokenStream(adaptor,"token SPACE");
		RewriteRuleITokenStream stream_EQUALS=new RewriteRuleITokenStream(adaptor,"token EQUALS");
		RewriteRuleITokenStream stream_NOTEQUALS=new RewriteRuleITokenStream(adaptor,"token NOTEQUALS");
		RewriteRuleITokenStream stream_GREATERTHAN=new RewriteRuleITokenStream(adaptor,"token GREATERTHAN");
		RewriteRuleITokenStream stream_GREATERTHANOREQUAL=new RewriteRuleITokenStream(adaptor,"token GREATERTHANOREQUAL");
		RewriteRuleITokenStream stream_LESSTHAN=new RewriteRuleITokenStream(adaptor,"token LESSTHAN");
		RewriteRuleITokenStream stream_LESSTHANOREQUAL=new RewriteRuleITokenStream(adaptor,"token LESSTHANOREQUAL");
		RewriteRuleSubtreeStream stream_atom=new RewriteRuleSubtreeStream(adaptor,"rule atom");
		try { DebugEnterRule(GrammarFileName, "booleanexpression");
		DebugLocation(93, 3);
		try
		{
			// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:94:2: (atom1= atom[subquery] ( SPACE (op= EQUALS |op= NOTEQUALS |op= GREATERTHAN |op= GREATERTHANOREQUAL |op= LESSTHAN |op= LESSTHANOREQUAL ) SPACE atom2= atom[subquery] -> ^( $op $atom1 $atom2) | -> ^( EQUALS[\"eq\"] $atom1 BOOL[\"true\"] ) ) )
			DebugEnterAlt(1);
			// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:94:4: atom1= atom[subquery] ( SPACE (op= EQUALS |op= NOTEQUALS |op= GREATERTHAN |op= GREATERTHANOREQUAL |op= LESSTHAN |op= LESSTHANOREQUAL ) SPACE atom2= atom[subquery] -> ^( $op $atom1 $atom2) | -> ^( EQUALS[\"eq\"] $atom1 BOOL[\"true\"] ) )
			{
			DebugLocation(94, 9);
			PushFollow(Follow._atom_in_booleanexpression514);
			atom1=atom(subquery);
			PopFollow();

			stream_atom.Add(atom1.Tree);
			DebugLocation(94, 25);
			// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:94:25: ( SPACE (op= EQUALS |op= NOTEQUALS |op= GREATERTHAN |op= GREATERTHANOREQUAL |op= LESSTHAN |op= LESSTHANOREQUAL ) SPACE atom2= atom[subquery] -> ^( $op $atom1 $atom2) | -> ^( EQUALS[\"eq\"] $atom1 BOOL[\"true\"] ) )
			int alt19=2;
			try { DebugEnterSubRule(19);
			try { DebugEnterDecision(19, false);
			int LA19_1 = input.LA(1);

			if ((LA19_1==SPACE))
			{
				int LA19_2 = input.LA(2);

				if ((LA19_2==AND||LA19_2==OR))
				{
					alt19 = 2;
				}
				else if ((LA19_2==EQUALS||(LA19_2>=GREATERTHAN && LA19_2<=GREATERTHANOREQUAL)||(LA19_2>=LESSTHAN && LA19_2<=LESSTHANOREQUAL)||LA19_2==NOTEQUALS))
				{
					alt19 = 1;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 19, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA19_1==EOF||LA19_1==APPLY||(LA19_1>=EXPAND && LA19_1<=FILTER)||(LA19_1>=IGNORED && LA19_1<=INLINECOUNT)||LA19_1==ORDERBY||LA19_1==SELECT||LA19_1==SKIP||LA19_1==TOP||LA19_1==74||LA19_1==76))
			{
				alt19 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 19, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(19); }
			switch (alt19)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:95:4: SPACE (op= EQUALS |op= NOTEQUALS |op= GREATERTHAN |op= GREATERTHANOREQUAL |op= LESSTHAN |op= LESSTHANOREQUAL ) SPACE atom2= atom[subquery]
				{
				DebugLocation(95, 4);
				SPACE81=(IToken)Match(input,SPACE,Follow._SPACE_in_booleanexpression522);  
				stream_SPACE.Add(SPACE81);

				DebugLocation(95, 10);
				// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:95:10: (op= EQUALS |op= NOTEQUALS |op= GREATERTHAN |op= GREATERTHANOREQUAL |op= LESSTHAN |op= LESSTHANOREQUAL )
				int alt18=6;
				try { DebugEnterSubRule(18);
				try { DebugEnterDecision(18, false);
				switch (input.LA(1))
				{
				case EQUALS:
					{
					alt18 = 1;
					}
					break;
				case NOTEQUALS:
					{
					alt18 = 2;
					}
					break;
				case GREATERTHAN:
					{
					alt18 = 3;
					}
					break;
				case GREATERTHANOREQUAL:
					{
					alt18 = 4;
					}
					break;
				case LESSTHAN:
					{
					alt18 = 5;
					}
					break;
				case LESSTHANOREQUAL:
					{
					alt18 = 6;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 18, 0, input, 1);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(18); }
				switch (alt18)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:95:11: op= EQUALS
					{
					DebugLocation(95, 13);
					op=(IToken)Match(input,EQUALS,Follow._EQUALS_in_booleanexpression527);  
					stream_EQUALS.Add(op);


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:95:23: op= NOTEQUALS
					{
					DebugLocation(95, 25);
					op=(IToken)Match(input,NOTEQUALS,Follow._NOTEQUALS_in_booleanexpression533);  
					stream_NOTEQUALS.Add(op);


					}
					break;
				case 3:
					DebugEnterAlt(3);
					// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:95:38: op= GREATERTHAN
					{
					DebugLocation(95, 40);
					op=(IToken)Match(input,GREATERTHAN,Follow._GREATERTHAN_in_booleanexpression539);  
					stream_GREATERTHAN.Add(op);


					}
					break;
				case 4:
					DebugEnterAlt(4);
					// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:95:55: op= GREATERTHANOREQUAL
					{
					DebugLocation(95, 57);
					op=(IToken)Match(input,GREATERTHANOREQUAL,Follow._GREATERTHANOREQUAL_in_booleanexpression545);  
					stream_GREATERTHANOREQUAL.Add(op);


					}
					break;
				case 5:
					DebugEnterAlt(5);
					// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:95:79: op= LESSTHAN
					{
					DebugLocation(95, 81);
					op=(IToken)Match(input,LESSTHAN,Follow._LESSTHAN_in_booleanexpression551);  
					stream_LESSTHAN.Add(op);


					}
					break;
				case 6:
					DebugEnterAlt(6);
					// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:95:93: op= LESSTHANOREQUAL
					{
					DebugLocation(95, 95);
					op=(IToken)Match(input,LESSTHANOREQUAL,Follow._LESSTHANOREQUAL_in_booleanexpression557);  
					stream_LESSTHANOREQUAL.Add(op);


					}
					break;

				}
				} finally { DebugExitSubRule(18); }

				DebugLocation(95, 113);
				SPACE82=(IToken)Match(input,SPACE,Follow._SPACE_in_booleanexpression560);  
				stream_SPACE.Add(SPACE82);

				DebugLocation(95, 124);
				PushFollow(Follow._atom_in_booleanexpression564);
				atom2=atom(subquery);
				PopFollow();

				stream_atom.Add(atom2.Tree);


				{
				// AST REWRITE
				// elements: op, atom1, atom2
				// token labels: op
				// rule labels: atom1, atom2, retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleITokenStream stream_op=new RewriteRuleITokenStream(adaptor,"token op",op);
				RewriteRuleSubtreeStream stream_atom1=new RewriteRuleSubtreeStream(adaptor,"rule atom1",atom1!=null?atom1.Tree:null);
				RewriteRuleSubtreeStream stream_atom2=new RewriteRuleSubtreeStream(adaptor,"rule atom2",atom2!=null?atom2.Tree:null);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 96:4: -> ^( $op $atom1 $atom2)
				{
					DebugLocation(96, 7);
					// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:96:7: ^( $op $atom1 $atom2)
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(96, 10);
					root_1 = (object)adaptor.BecomeRoot(stream_op.NextNode(), root_1);

					DebugLocation(96, 14);
					adaptor.AddChild(root_1, stream_atom1.NextTree());
					DebugLocation(96, 21);
					adaptor.AddChild(root_1, stream_atom2.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:97:5: 
				{

				{
				// AST REWRITE
				// elements: EQUALS, atom1
				// token labels: 
				// rule labels: atom1, retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_atom1=new RewriteRuleSubtreeStream(adaptor,"rule atom1",atom1!=null?atom1.Tree:null);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 97:5: -> ^( EQUALS[\"eq\"] $atom1 BOOL[\"true\"] )
				{
					DebugLocation(97, 8);
					// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:97:8: ^( EQUALS[\"eq\"] $atom1 BOOL[\"true\"] )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(97, 10);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(EQUALS, "eq"), root_1);

					DebugLocation(97, 24);
					adaptor.AddChild(root_1, stream_atom1.NextTree());
					DebugLocation(97, 30);
					adaptor.AddChild(root_1, (object)adaptor.Create(BOOL, "true"));

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(19); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("booleanexpression", 21);
			LeaveRule("booleanexpression", 21);
			LeaveRule_booleanexpression();
		}
		DebugLocation(98, 3);
		} finally { DebugExitRule(GrammarFileName, "booleanexpression"); }
		return retval;

	}
	// $ANTLR end "booleanexpression"

	partial void EnterRule_atom();
	partial void LeaveRule_atom();
	// $ANTLR start "atom"
	// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:100:1: atom[bool subquery] : ( functioncall[subquery] | constant | accessor[subquery] );
	[GrammarRule("atom")]
	private AstParserRuleReturnScope<object, IToken> atom(bool subquery)
	{
		EnterRule_atom();
		EnterRule("atom", 22);
		TraceIn("atom", 22);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		AstParserRuleReturnScope<object, IToken> functioncall83 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> constant84 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> accessor85 = default(AstParserRuleReturnScope<object, IToken>);

		try { DebugEnterRule(GrammarFileName, "atom");
		DebugLocation(100, 21);
		try
		{
			// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:101:2: ( functioncall[subquery] | constant | accessor[subquery] )
			int alt20=3;
			try { DebugEnterDecision(20, false);
			switch (input.LA(1))
			{
			case DAY:
			case DAYS:
			case ENDSWITH:
			case HOUR:
			case HOURS:
			case MINUTE:
			case MINUTES:
			case MONTH:
			case SECOND:
			case SECONDS:
			case STARTSWITH:
			case SUBSTRINGOF:
			case TOLOWER:
			case TOUPPER:
			case YEAR:
			case YEARS:
				{
				alt20 = 1;
				}
				break;
			case BOOL:
			case BYTE:
			case DATETIME:
			case DECIMAL:
			case DOUBLE:
			case GUID:
			case INT:
			case LONG:
			case NULL:
			case SINGLE:
			case STRING:
				{
				alt20 = 2;
				}
				break;
			case DYNAMICIDENTIFIER:
			case IDENTIFIER:
				{
				alt20 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 20, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(20); }
			switch (alt20)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:101:4: functioncall[subquery]
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(101, 4);
				PushFollow(Follow._functioncall_in_atom616);
				functioncall83=functioncall(subquery);
				PopFollow();

				adaptor.AddChild(root_0, functioncall83.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:102:4: constant
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(102, 4);
				PushFollow(Follow._constant_in_atom622);
				constant84=constant();
				PopFollow();

				adaptor.AddChild(root_0, constant84.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:103:4: accessor[subquery]
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(103, 4);
				PushFollow(Follow._accessor_in_atom627);
				accessor85=accessor(subquery);
				PopFollow();

				adaptor.AddChild(root_0, accessor85.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("atom", 22);
			LeaveRule("atom", 22);
			LeaveRule_atom();
		}
		DebugLocation(103, 21);
		} finally { DebugExitRule(GrammarFileName, "atom"); }
		return retval;

	}
	// $ANTLR end "atom"

	partial void EnterRule_functioncall();
	partial void LeaveRule_functioncall();
	// $ANTLR start "functioncall"
	// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:105:1: functioncall[bool subquery] : function ^ '(' atom[subquery] ( ',' atom[subquery] )* ')' ;
	[GrammarRule("functioncall")]
	private AstParserRuleReturnScope<object, IToken> functioncall(bool subquery)
	{
		EnterRule_functioncall();
		EnterRule("functioncall", 23);
		TraceIn("functioncall", 23);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken char_literal87 = default(IToken);
		IToken char_literal89 = default(IToken);
		IToken char_literal91 = default(IToken);
		AstParserRuleReturnScope<object, IToken> function86 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> atom88 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> atom90 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal87_tree = default(object);
		object char_literal89_tree = default(object);
		object char_literal91_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "functioncall");
		DebugLocation(105, 57);
		try
		{
			// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:106:2: ( function ^ '(' atom[subquery] ( ',' atom[subquery] )* ')' )
			DebugEnterAlt(1);
			// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:106:4: function ^ '(' atom[subquery] ( ',' atom[subquery] )* ')'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(106, 12);
			PushFollow(Follow._function_in_functioncall639);
			function86=function();
			PopFollow();

			root_0 = (object)adaptor.BecomeRoot(function86.Tree, root_0);
			DebugLocation(106, 14);
			char_literal87=(IToken)Match(input,75,Follow._75_in_functioncall642); 
			char_literal87_tree = (object)adaptor.Create(char_literal87);
			adaptor.AddChild(root_0, char_literal87_tree);
			DebugLocation(106, 18);
			PushFollow(Follow._atom_in_functioncall644);
			atom88=atom(subquery);
			PopFollow();

			adaptor.AddChild(root_0, atom88.Tree);
			DebugLocation(106, 33);
			// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:106:33: ( ',' atom[subquery] )*
			try { DebugEnterSubRule(21);
			while (true)
			{
				int alt21=2;
				try { DebugEnterDecision(21, false);
				int LA21_1 = input.LA(1);

				if ((LA21_1==77))
				{
					alt21 = 1;
				}


				} finally { DebugExitDecision(21); }
				switch ( alt21 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:106:34: ',' atom[subquery]
					{
					DebugLocation(106, 34);
					char_literal89=(IToken)Match(input,77,Follow._77_in_functioncall648); 
					char_literal89_tree = (object)adaptor.Create(char_literal89);
					adaptor.AddChild(root_0, char_literal89_tree);
					DebugLocation(106, 38);
					PushFollow(Follow._atom_in_functioncall650);
					atom90=atom(subquery);
					PopFollow();

					adaptor.AddChild(root_0, atom90.Tree);

					}
					break;

				default:
					goto loop21;
				}
			}

			loop21:
				;

			} finally { DebugExitSubRule(21); }

			DebugLocation(106, 55);
			char_literal91=(IToken)Match(input,76,Follow._76_in_functioncall655); 
			char_literal91_tree = (object)adaptor.Create(char_literal91);
			adaptor.AddChild(root_0, char_literal91_tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("functioncall", 23);
			LeaveRule("functioncall", 23);
			LeaveRule_functioncall();
		}
		DebugLocation(106, 57);
		} finally { DebugExitRule(GrammarFileName, "functioncall"); }
		return retval;

	}
	// $ANTLR end "functioncall"

	partial void EnterRule_accessor();
	partial void LeaveRule_accessor();
	// $ANTLR start "accessor"
	// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:108:1: accessor[bool subquery] : ( propertyname[subquery] -> propertyname ) ( '/' (func= ANY |func= ALL |func= COUNT |func= MAX |func= MIN |func= SUM |func= AVERAGE ) '(' ( (id= IDENTIFIER ':' SPACE filterexpression[true] ) -> ^( $func $accessor ALIAS[$id] filterexpression ) | -> ^( $func $accessor) ) ')' )? ;
	[GrammarRule("accessor")]
	private AstParserRuleReturnScope<object, IToken> accessor(bool subquery)
	{
		EnterRule_accessor();
		EnterRule("accessor", 24);
		TraceIn("accessor", 24);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken func = default(IToken);
		IToken id = default(IToken);
		IToken char_literal93 = default(IToken);
		IToken char_literal94 = default(IToken);
		IToken char_literal95 = default(IToken);
		IToken SPACE96 = default(IToken);
		IToken char_literal98 = default(IToken);
		AstParserRuleReturnScope<object, IToken> propertyname92 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> filterexpression97 = default(AstParserRuleReturnScope<object, IToken>);

		object func_tree = default(object);
		object id_tree = default(object);
		object char_literal93_tree = default(object);
		object char_literal94_tree = default(object);
		object char_literal95_tree = default(object);
		object SPACE96_tree = default(object);
		object char_literal98_tree = default(object);
		RewriteRuleITokenStream stream_78=new RewriteRuleITokenStream(adaptor,"token 78");
		RewriteRuleITokenStream stream_ANY=new RewriteRuleITokenStream(adaptor,"token ANY");
		RewriteRuleITokenStream stream_ALL=new RewriteRuleITokenStream(adaptor,"token ALL");
		RewriteRuleITokenStream stream_COUNT=new RewriteRuleITokenStream(adaptor,"token COUNT");
		RewriteRuleITokenStream stream_MAX=new RewriteRuleITokenStream(adaptor,"token MAX");
		RewriteRuleITokenStream stream_MIN=new RewriteRuleITokenStream(adaptor,"token MIN");
		RewriteRuleITokenStream stream_SUM=new RewriteRuleITokenStream(adaptor,"token SUM");
		RewriteRuleITokenStream stream_AVERAGE=new RewriteRuleITokenStream(adaptor,"token AVERAGE");
		RewriteRuleITokenStream stream_75=new RewriteRuleITokenStream(adaptor,"token 75");
		RewriteRuleITokenStream stream_IDENTIFIER=new RewriteRuleITokenStream(adaptor,"token IDENTIFIER");
		RewriteRuleITokenStream stream_79=new RewriteRuleITokenStream(adaptor,"token 79");
		RewriteRuleITokenStream stream_SPACE=new RewriteRuleITokenStream(adaptor,"token SPACE");
		RewriteRuleITokenStream stream_76=new RewriteRuleITokenStream(adaptor,"token 76");
		RewriteRuleSubtreeStream stream_propertyname=new RewriteRuleSubtreeStream(adaptor,"rule propertyname");
		RewriteRuleSubtreeStream stream_filterexpression=new RewriteRuleSubtreeStream(adaptor,"rule filterexpression");
		try { DebugEnterRule(GrammarFileName, "accessor");
		DebugLocation(108, 4);
		try
		{
			// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:108:24: ( ( propertyname[subquery] -> propertyname ) ( '/' (func= ANY |func= ALL |func= COUNT |func= MAX |func= MIN |func= SUM |func= AVERAGE ) '(' ( (id= IDENTIFIER ':' SPACE filterexpression[true] ) -> ^( $func $accessor ALIAS[$id] filterexpression ) | -> ^( $func $accessor) ) ')' )? )
			DebugEnterAlt(1);
			// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:109:3: ( propertyname[subquery] -> propertyname ) ( '/' (func= ANY |func= ALL |func= COUNT |func= MAX |func= MIN |func= SUM |func= AVERAGE ) '(' ( (id= IDENTIFIER ':' SPACE filterexpression[true] ) -> ^( $func $accessor ALIAS[$id] filterexpression ) | -> ^( $func $accessor) ) ')' )?
			{
			DebugLocation(109, 3);
			// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:109:3: ( propertyname[subquery] -> propertyname )
			DebugEnterAlt(1);
			// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:109:4: propertyname[subquery]
			{
			DebugLocation(109, 4);
			PushFollow(Follow._propertyname_in_accessor667);
			propertyname92=propertyname(subquery);
			PopFollow();

			stream_propertyname.Add(propertyname92.Tree);


			{
			// AST REWRITE
			// elements: propertyname
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 109:27: -> propertyname
			{
				DebugLocation(109, 30);
				adaptor.AddChild(root_0, stream_propertyname.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(109, 44);
			// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:109:44: ( '/' (func= ANY |func= ALL |func= COUNT |func= MAX |func= MIN |func= SUM |func= AVERAGE ) '(' ( (id= IDENTIFIER ':' SPACE filterexpression[true] ) -> ^( $func $accessor ALIAS[$id] filterexpression ) | -> ^( $func $accessor) ) ')' )?
			int alt24=2;
			try { DebugEnterSubRule(24);
			try { DebugEnterDecision(24, false);
			int LA24_1 = input.LA(1);

			if ((LA24_1==78))
			{
				alt24 = 1;
			}
			} finally { DebugExitDecision(24); }
			switch (alt24)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:110:4: '/' (func= ANY |func= ALL |func= COUNT |func= MAX |func= MIN |func= SUM |func= AVERAGE ) '(' ( (id= IDENTIFIER ':' SPACE filterexpression[true] ) -> ^( $func $accessor ALIAS[$id] filterexpression ) | -> ^( $func $accessor) ) ')'
				{
				DebugLocation(110, 4);
				char_literal93=(IToken)Match(input,78,Follow._78_in_accessor680);  
				stream_78.Add(char_literal93);

				DebugLocation(110, 8);
				// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:110:8: (func= ANY |func= ALL |func= COUNT |func= MAX |func= MIN |func= SUM |func= AVERAGE )
				int alt22=7;
				try { DebugEnterSubRule(22);
				try { DebugEnterDecision(22, false);
				switch (input.LA(1))
				{
				case ANY:
					{
					alt22 = 1;
					}
					break;
				case ALL:
					{
					alt22 = 2;
					}
					break;
				case COUNT:
					{
					alt22 = 3;
					}
					break;
				case MAX:
					{
					alt22 = 4;
					}
					break;
				case MIN:
					{
					alt22 = 5;
					}
					break;
				case SUM:
					{
					alt22 = 6;
					}
					break;
				case AVERAGE:
					{
					alt22 = 7;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 22, 0, input, 1);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(22); }
				switch (alt22)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:110:9: func= ANY
					{
					DebugLocation(110, 13);
					func=(IToken)Match(input,ANY,Follow._ANY_in_accessor685);  
					stream_ANY.Add(func);


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:110:20: func= ALL
					{
					DebugLocation(110, 24);
					func=(IToken)Match(input,ALL,Follow._ALL_in_accessor691);  
					stream_ALL.Add(func);


					}
					break;
				case 3:
					DebugEnterAlt(3);
					// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:110:31: func= COUNT
					{
					DebugLocation(110, 35);
					func=(IToken)Match(input,COUNT,Follow._COUNT_in_accessor697);  
					stream_COUNT.Add(func);


					}
					break;
				case 4:
					DebugEnterAlt(4);
					// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:110:44: func= MAX
					{
					DebugLocation(110, 48);
					func=(IToken)Match(input,MAX,Follow._MAX_in_accessor703);  
					stream_MAX.Add(func);


					}
					break;
				case 5:
					DebugEnterAlt(5);
					// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:110:55: func= MIN
					{
					DebugLocation(110, 59);
					func=(IToken)Match(input,MIN,Follow._MIN_in_accessor709);  
					stream_MIN.Add(func);


					}
					break;
				case 6:
					DebugEnterAlt(6);
					// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:110:66: func= SUM
					{
					DebugLocation(110, 70);
					func=(IToken)Match(input,SUM,Follow._SUM_in_accessor715);  
					stream_SUM.Add(func);


					}
					break;
				case 7:
					DebugEnterAlt(7);
					// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:110:77: func= AVERAGE
					{
					DebugLocation(110, 81);
					func=(IToken)Match(input,AVERAGE,Follow._AVERAGE_in_accessor721);  
					stream_AVERAGE.Add(func);


					}
					break;

				}
				} finally { DebugExitSubRule(22); }

				DebugLocation(111, 4);
				char_literal94=(IToken)Match(input,75,Follow._75_in_accessor728);  
				stream_75.Add(char_literal94);

				DebugLocation(111, 8);
				// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:111:8: ( (id= IDENTIFIER ':' SPACE filterexpression[true] ) -> ^( $func $accessor ALIAS[$id] filterexpression ) | -> ^( $func $accessor) )
				int alt23=2;
				try { DebugEnterSubRule(23);
				try { DebugEnterDecision(23, false);
				int LA23_1 = input.LA(1);

				if ((LA23_1==IDENTIFIER))
				{
					alt23 = 1;
				}
				else if ((LA23_1==76))
				{
					alt23 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 23, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(23); }
				switch (alt23)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:112:5: (id= IDENTIFIER ':' SPACE filterexpression[true] )
					{
					DebugLocation(112, 5);
					// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:112:5: (id= IDENTIFIER ':' SPACE filterexpression[true] )
					DebugEnterAlt(1);
					// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:112:6: id= IDENTIFIER ':' SPACE filterexpression[true]
					{
					DebugLocation(112, 8);
					id=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_accessor739);  
					stream_IDENTIFIER.Add(id);

					DebugLocation(112, 20);
					char_literal95=(IToken)Match(input,79,Follow._79_in_accessor741);  
					stream_79.Add(char_literal95);

					DebugLocation(112, 24);
					SPACE96=(IToken)Match(input,SPACE,Follow._SPACE_in_accessor743);  
					stream_SPACE.Add(SPACE96);

					DebugLocation(112, 30);
					PushFollow(Follow._filterexpression_in_accessor745);
					filterexpression97=filterexpression(true);
					PopFollow();

					stream_filterexpression.Add(filterexpression97.Tree);

					}



					{
					// AST REWRITE
					// elements: func, accessor, filterexpression
					// token labels: func
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleITokenStream stream_func=new RewriteRuleITokenStream(adaptor,"token func",func);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (object)adaptor.Nil();
					// 112:54: -> ^( $func $accessor ALIAS[$id] filterexpression )
					{
						DebugLocation(112, 57);
						// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:112:57: ^( $func $accessor ALIAS[$id] filterexpression )
						{
						object root_1 = (object)adaptor.Nil();
						DebugLocation(112, 60);
						root_1 = (object)adaptor.BecomeRoot(stream_func.NextNode(), root_1);

						DebugLocation(112, 66);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(112, 75);
						adaptor.AddChild(root_1, (object)adaptor.Create(ALIAS, id));
						DebugLocation(112, 86);
						adaptor.AddChild(root_1, stream_filterexpression.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:113:7: 
					{

					{
					// AST REWRITE
					// elements: func, accessor
					// token labels: func
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleITokenStream stream_func=new RewriteRuleITokenStream(adaptor,"token func",func);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (object)adaptor.Nil();
					// 113:7: -> ^( $func $accessor)
					{
						DebugLocation(113, 10);
						// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:113:10: ^( $func $accessor)
						{
						object root_1 = (object)adaptor.Nil();
						DebugLocation(113, 13);
						root_1 = (object)adaptor.BecomeRoot(stream_func.NextNode(), root_1);

						DebugLocation(113, 19);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(23); }

				DebugLocation(114, 4);
				char_literal98=(IToken)Match(input,76,Follow._76_in_accessor785);  
				stream_76.Add(char_literal98);


				}
				break;

			}
			} finally { DebugExitSubRule(24); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("accessor", 24);
			LeaveRule("accessor", 24);
			LeaveRule_accessor();
		}
		DebugLocation(115, 4);
		} finally { DebugExitRule(GrammarFileName, "accessor"); }
		return retval;

	}
	// $ANTLR end "accessor"

	partial void EnterRule_function();
	partial void LeaveRule_function();
	// $ANTLR start "function"
	// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:117:1: function : ( STARTSWITH | ENDSWITH | SUBSTRINGOF | TOLOWER | TOUPPER | YEAR | YEARS | MONTH | DAY | DAYS | HOUR | HOURS | MINUTE | MINUTES | SECOND | SECONDS );
	[GrammarRule("function")]
	private AstParserRuleReturnScope<object, IToken> function()
	{
		EnterRule_function();
		EnterRule("function", 25);
		TraceIn("function", 25);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken set99 = default(IToken);

		object set99_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "function");
		DebugLocation(117, 147);
		try
		{
			// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:118:2: ( STARTSWITH | ENDSWITH | SUBSTRINGOF | TOLOWER | TOUPPER | YEAR | YEARS | MONTH | DAY | DAYS | HOUR | HOURS | MINUTE | MINUTES | SECOND | SECONDS )
			DebugEnterAlt(1);
			// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(118, 2);

			set99=(IToken)input.LT(1);
			if ((input.LA(1)>=DAY && input.LA(1)<=DAYS)||input.LA(1)==ENDSWITH||(input.LA(1)>=HOUR && input.LA(1)<=HOURS)||(input.LA(1)>=MINUTE && input.LA(1)<=MONTH)||(input.LA(1)>=SECOND && input.LA(1)<=SECONDS)||input.LA(1)==STARTSWITH||input.LA(1)==SUBSTRINGOF||input.LA(1)==TOLOWER||input.LA(1)==TOUPPER||(input.LA(1)>=YEAR && input.LA(1)<=YEARS))
			{
				input.Consume();
				adaptor.AddChild(root_0, (object)adaptor.Create(set99));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("function", 25);
			LeaveRule("function", 25);
			LeaveRule_function();
		}
		DebugLocation(118, 147);
		} finally { DebugExitRule(GrammarFileName, "function"); }
		return retval;

	}
	// $ANTLR end "function"

	partial void EnterRule_orderby();
	partial void LeaveRule_orderby();
	// $ANTLR start "orderby"
	// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:120:1: orderby : ORDERBY ^ orderbylist ;
	[GrammarRule("orderby")]
	private AstParserRuleReturnScope<object, IToken> orderby()
	{
		EnterRule_orderby();
		EnterRule("orderby", 26);
		TraceIn("orderby", 26);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken ORDERBY100 = default(IToken);
		AstParserRuleReturnScope<object, IToken> orderbylist101 = default(AstParserRuleReturnScope<object, IToken>);

		object ORDERBY100_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "orderby");
		DebugLocation(120, 23);
		try
		{
			// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:121:2: ( ORDERBY ^ orderbylist )
			DebugEnterAlt(1);
			// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:121:4: ORDERBY ^ orderbylist
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(121, 11);
			ORDERBY100=(IToken)Match(input,ORDERBY,Follow._ORDERBY_in_orderby872); 
			ORDERBY100_tree = (object)adaptor.Create(ORDERBY100);
			root_0 = (object)adaptor.BecomeRoot(ORDERBY100_tree, root_0);
			DebugLocation(121, 13);
			PushFollow(Follow._orderbylist_in_orderby875);
			orderbylist101=orderbylist();
			PopFollow();

			adaptor.AddChild(root_0, orderbylist101.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("orderby", 26);
			LeaveRule("orderby", 26);
			LeaveRule_orderby();
		}
		DebugLocation(121, 23);
		} finally { DebugExitRule(GrammarFileName, "orderby"); }
		return retval;

	}
	// $ANTLR end "orderby"

	partial void EnterRule_orderbylist();
	partial void LeaveRule_orderbylist();
	// $ANTLR start "orderbylist"
	// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:123:1: orderbylist : orderpropertyname ( ',' ! orderpropertyname )* ;
	[GrammarRule("orderbylist")]
	private AstParserRuleReturnScope<object, IToken> orderbylist()
	{
		EnterRule_orderbylist();
		EnterRule("orderbylist", 27);
		TraceIn("orderbylist", 27);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken char_literal103 = default(IToken);
		AstParserRuleReturnScope<object, IToken> orderpropertyname102 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> orderpropertyname104 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal103_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "orderbylist");
		DebugLocation(123, 46);
		try
		{
			// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:124:2: ( orderpropertyname ( ',' ! orderpropertyname )* )
			DebugEnterAlt(1);
			// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:124:4: orderpropertyname ( ',' ! orderpropertyname )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(124, 4);
			PushFollow(Follow._orderpropertyname_in_orderbylist885);
			orderpropertyname102=orderpropertyname();
			PopFollow();

			adaptor.AddChild(root_0, orderpropertyname102.Tree);
			DebugLocation(124, 22);
			// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:124:22: ( ',' ! orderpropertyname )*
			try { DebugEnterSubRule(25);
			while (true)
			{
				int alt25=2;
				try { DebugEnterDecision(25, false);
				int LA25_1 = input.LA(1);

				if ((LA25_1==77))
				{
					alt25 = 1;
				}


				} finally { DebugExitDecision(25); }
				switch ( alt25 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:124:23: ',' ! orderpropertyname
					{
					DebugLocation(124, 26);
					char_literal103=(IToken)Match(input,77,Follow._77_in_orderbylist888); 
					DebugLocation(124, 28);
					PushFollow(Follow._orderpropertyname_in_orderbylist891);
					orderpropertyname104=orderpropertyname();
					PopFollow();

					adaptor.AddChild(root_0, orderpropertyname104.Tree);

					}
					break;

				default:
					goto loop25;
				}
			}

			loop25:
				;

			} finally { DebugExitSubRule(25); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("orderbylist", 27);
			LeaveRule("orderbylist", 27);
			LeaveRule_orderbylist();
		}
		DebugLocation(124, 46);
		} finally { DebugExitRule(GrammarFileName, "orderbylist"); }
		return retval;

	}
	// $ANTLR end "orderbylist"

	partial void EnterRule_orderpropertyname();
	partial void LeaveRule_orderpropertyname();
	// $ANTLR start "orderpropertyname"
	// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:126:1: orderpropertyname : propertyname[false] ( -> ^( ASC[\"asc\"] propertyname ) | ( SPACE (op= ASC |op= DESC ) ) -> ^( $op propertyname ) ) ;
	[GrammarRule("orderpropertyname")]
	private AstParserRuleReturnScope<object, IToken> orderpropertyname()
	{
		EnterRule_orderpropertyname();
		EnterRule("orderpropertyname", 28);
		TraceIn("orderpropertyname", 28);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken op = default(IToken);
		IToken SPACE106 = default(IToken);
		AstParserRuleReturnScope<object, IToken> propertyname105 = default(AstParserRuleReturnScope<object, IToken>);

		object op_tree = default(object);
		object SPACE106_tree = default(object);
		RewriteRuleITokenStream stream_SPACE=new RewriteRuleITokenStream(adaptor,"token SPACE");
		RewriteRuleITokenStream stream_ASC=new RewriteRuleITokenStream(adaptor,"token ASC");
		RewriteRuleITokenStream stream_DESC=new RewriteRuleITokenStream(adaptor,"token DESC");
		RewriteRuleSubtreeStream stream_propertyname=new RewriteRuleSubtreeStream(adaptor,"rule propertyname");
		try { DebugEnterRule(GrammarFileName, "orderpropertyname");
		DebugLocation(126, 3);
		try
		{
			// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:127:2: ( propertyname[false] ( -> ^( ASC[\"asc\"] propertyname ) | ( SPACE (op= ASC |op= DESC ) ) -> ^( $op propertyname ) ) )
			DebugEnterAlt(1);
			// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:127:4: propertyname[false] ( -> ^( ASC[\"asc\"] propertyname ) | ( SPACE (op= ASC |op= DESC ) ) -> ^( $op propertyname ) )
			{
			DebugLocation(127, 4);
			PushFollow(Follow._propertyname_in_orderpropertyname902);
			propertyname105=propertyname(false);
			PopFollow();

			stream_propertyname.Add(propertyname105.Tree);
			DebugLocation(127, 24);
			// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:127:24: ( -> ^( ASC[\"asc\"] propertyname ) | ( SPACE (op= ASC |op= DESC ) ) -> ^( $op propertyname ) )
			int alt27=2;
			try { DebugEnterSubRule(27);
			try { DebugEnterDecision(27, false);
			int LA27_1 = input.LA(1);

			if ((LA27_1==EOF||LA27_1==APPLY||(LA27_1>=EXPAND && LA27_1<=FILTER)||(LA27_1>=IGNORED && LA27_1<=INLINECOUNT)||LA27_1==ORDERBY||LA27_1==SELECT||LA27_1==SKIP||LA27_1==TOP||LA27_1==74||LA27_1==77))
			{
				alt27 = 1;
			}
			else if ((LA27_1==SPACE))
			{
				alt27 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 27, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(27); }
			switch (alt27)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:128:4: 
				{

				{
				// AST REWRITE
				// elements: propertyname
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 128:4: -> ^( ASC[\"asc\"] propertyname )
				{
					DebugLocation(128, 7);
					// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:128:7: ^( ASC[\"asc\"] propertyname )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(128, 9);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(ASC, "asc"), root_1);

					DebugLocation(128, 20);
					adaptor.AddChild(root_1, stream_propertyname.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:129:6: ( SPACE (op= ASC |op= DESC ) )
				{
				DebugLocation(129, 6);
				// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:129:6: ( SPACE (op= ASC |op= DESC ) )
				DebugEnterAlt(1);
				// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:129:7: SPACE (op= ASC |op= DESC )
				{
				DebugLocation(129, 7);
				SPACE106=(IToken)Match(input,SPACE,Follow._SPACE_in_orderpropertyname925);  
				stream_SPACE.Add(SPACE106);

				DebugLocation(129, 13);
				// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:129:13: (op= ASC |op= DESC )
				int alt26=2;
				try { DebugEnterSubRule(26);
				try { DebugEnterDecision(26, false);
				int LA26_1 = input.LA(1);

				if ((LA26_1==ASC))
				{
					alt26 = 1;
				}
				else if ((LA26_1==DESC))
				{
					alt26 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 26, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(26); }
				switch (alt26)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:129:14: op= ASC
					{
					DebugLocation(129, 16);
					op=(IToken)Match(input,ASC,Follow._ASC_in_orderpropertyname930);  
					stream_ASC.Add(op);


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:129:23: op= DESC
					{
					DebugLocation(129, 25);
					op=(IToken)Match(input,DESC,Follow._DESC_in_orderpropertyname936);  
					stream_DESC.Add(op);


					}
					break;

				}
				} finally { DebugExitSubRule(26); }


				}



				{
				// AST REWRITE
				// elements: op, propertyname
				// token labels: op
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleITokenStream stream_op=new RewriteRuleITokenStream(adaptor,"token op",op);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 129:33: -> ^( $op propertyname )
				{
					DebugLocation(129, 36);
					// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:129:36: ^( $op propertyname )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(129, 39);
					root_1 = (object)adaptor.BecomeRoot(stream_op.NextNode(), root_1);

					DebugLocation(129, 42);
					adaptor.AddChild(root_1, stream_propertyname.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(27); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("orderpropertyname", 28);
			LeaveRule("orderpropertyname", 28);
			LeaveRule_orderpropertyname();
		}
		DebugLocation(130, 3);
		} finally { DebugExitRule(GrammarFileName, "orderpropertyname"); }
		return retval;

	}
	// $ANTLR end "orderpropertyname"

	partial void EnterRule_constant();
	partial void LeaveRule_constant();
	// $ANTLR start "constant"
	// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:132:1: constant : ( INT ^| BOOL ^| STRING ^| DATETIME ^| LONG ^| SINGLE ^| DECIMAL ^| DOUBLE ^| GUID ^| BYTE ^| NULL ^) ;
	[GrammarRule("constant")]
	private AstParserRuleReturnScope<object, IToken> constant()
	{
		EnterRule_constant();
		EnterRule("constant", 29);
		TraceIn("constant", 29);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken INT107 = default(IToken);
		IToken BOOL108 = default(IToken);
		IToken STRING109 = default(IToken);
		IToken DATETIME110 = default(IToken);
		IToken LONG111 = default(IToken);
		IToken SINGLE112 = default(IToken);
		IToken DECIMAL113 = default(IToken);
		IToken DOUBLE114 = default(IToken);
		IToken GUID115 = default(IToken);
		IToken BYTE116 = default(IToken);
		IToken NULL117 = default(IToken);

		object INT107_tree = default(object);
		object BOOL108_tree = default(object);
		object STRING109_tree = default(object);
		object DATETIME110_tree = default(object);
		object LONG111_tree = default(object);
		object SINGLE112_tree = default(object);
		object DECIMAL113_tree = default(object);
		object DOUBLE114_tree = default(object);
		object GUID115_tree = default(object);
		object BYTE116_tree = default(object);
		object NULL117_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "constant");
		DebugLocation(132, 109);
		try
		{
			// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:132:9: ( ( INT ^| BOOL ^| STRING ^| DATETIME ^| LONG ^| SINGLE ^| DECIMAL ^| DOUBLE ^| GUID ^| BYTE ^| NULL ^) )
			DebugEnterAlt(1);
			// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:132:11: ( INT ^| BOOL ^| STRING ^| DATETIME ^| LONG ^| SINGLE ^| DECIMAL ^| DOUBLE ^| GUID ^| BYTE ^| NULL ^)
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(132, 11);
			// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:132:11: ( INT ^| BOOL ^| STRING ^| DATETIME ^| LONG ^| SINGLE ^| DECIMAL ^| DOUBLE ^| GUID ^| BYTE ^| NULL ^)
			int alt28=11;
			try { DebugEnterSubRule(28);
			try { DebugEnterDecision(28, false);
			switch (input.LA(1))
			{
			case INT:
				{
				alt28 = 1;
				}
				break;
			case BOOL:
				{
				alt28 = 2;
				}
				break;
			case STRING:
				{
				alt28 = 3;
				}
				break;
			case DATETIME:
				{
				alt28 = 4;
				}
				break;
			case LONG:
				{
				alt28 = 5;
				}
				break;
			case SINGLE:
				{
				alt28 = 6;
				}
				break;
			case DECIMAL:
				{
				alt28 = 7;
				}
				break;
			case DOUBLE:
				{
				alt28 = 8;
				}
				break;
			case GUID:
				{
				alt28 = 9;
				}
				break;
			case BYTE:
				{
				alt28 = 10;
				}
				break;
			case NULL:
				{
				alt28 = 11;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 28, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(28); }
			switch (alt28)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:132:12: INT ^
				{
				DebugLocation(132, 15);
				INT107=(IToken)Match(input,INT,Follow._INT_in_constant960); 
				INT107_tree = (object)adaptor.Create(INT107);
				root_0 = (object)adaptor.BecomeRoot(INT107_tree, root_0);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:132:19: BOOL ^
				{
				DebugLocation(132, 23);
				BOOL108=(IToken)Match(input,BOOL,Follow._BOOL_in_constant965); 
				BOOL108_tree = (object)adaptor.Create(BOOL108);
				root_0 = (object)adaptor.BecomeRoot(BOOL108_tree, root_0);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:132:27: STRING ^
				{
				DebugLocation(132, 33);
				STRING109=(IToken)Match(input,STRING,Follow._STRING_in_constant970); 
				STRING109_tree = (object)adaptor.Create(STRING109);
				root_0 = (object)adaptor.BecomeRoot(STRING109_tree, root_0);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:132:37: DATETIME ^
				{
				DebugLocation(132, 45);
				DATETIME110=(IToken)Match(input,DATETIME,Follow._DATETIME_in_constant975); 
				DATETIME110_tree = (object)adaptor.Create(DATETIME110);
				root_0 = (object)adaptor.BecomeRoot(DATETIME110_tree, root_0);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:132:49: LONG ^
				{
				DebugLocation(132, 53);
				LONG111=(IToken)Match(input,LONG,Follow._LONG_in_constant980); 
				LONG111_tree = (object)adaptor.Create(LONG111);
				root_0 = (object)adaptor.BecomeRoot(LONG111_tree, root_0);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:132:57: SINGLE ^
				{
				DebugLocation(132, 63);
				SINGLE112=(IToken)Match(input,SINGLE,Follow._SINGLE_in_constant985); 
				SINGLE112_tree = (object)adaptor.Create(SINGLE112);
				root_0 = (object)adaptor.BecomeRoot(SINGLE112_tree, root_0);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:132:67: DECIMAL ^
				{
				DebugLocation(132, 74);
				DECIMAL113=(IToken)Match(input,DECIMAL,Follow._DECIMAL_in_constant990); 
				DECIMAL113_tree = (object)adaptor.Create(DECIMAL113);
				root_0 = (object)adaptor.BecomeRoot(DECIMAL113_tree, root_0);

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:132:78: DOUBLE ^
				{
				DebugLocation(132, 84);
				DOUBLE114=(IToken)Match(input,DOUBLE,Follow._DOUBLE_in_constant995); 
				DOUBLE114_tree = (object)adaptor.Create(DOUBLE114);
				root_0 = (object)adaptor.BecomeRoot(DOUBLE114_tree, root_0);

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:132:88: GUID ^
				{
				DebugLocation(132, 92);
				GUID115=(IToken)Match(input,GUID,Follow._GUID_in_constant1000); 
				GUID115_tree = (object)adaptor.Create(GUID115);
				root_0 = (object)adaptor.BecomeRoot(GUID115_tree, root_0);

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:132:96: BYTE ^
				{
				DebugLocation(132, 100);
				BYTE116=(IToken)Match(input,BYTE,Follow._BYTE_in_constant1005); 
				BYTE116_tree = (object)adaptor.Create(BYTE116);
				root_0 = (object)adaptor.BecomeRoot(BYTE116_tree, root_0);

				}
				break;
			case 11:
				DebugEnterAlt(11);
				// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:132:104: NULL ^
				{
				DebugLocation(132, 108);
				NULL117=(IToken)Match(input,NULL,Follow._NULL_in_constant1010); 
				NULL117_tree = (object)adaptor.Create(NULL117);
				root_0 = (object)adaptor.BecomeRoot(NULL117_tree, root_0);

				}
				break;

			}
			} finally { DebugExitSubRule(28); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("constant", 29);
			LeaveRule("constant", 29);
			LeaveRule_constant();
		}
		DebugLocation(132, 109);
		} finally { DebugExitRule(GrammarFileName, "constant"); }
		return retval;

	}
	// $ANTLR end "constant"

	partial void EnterRule_propertyname();
	partial void LeaveRule_propertyname();
	// $ANTLR start "propertyname"
	// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:134:1: propertyname[bool subquery] : ( identifierpart[subquery] -> identifierpart ) ( '/' next= subpropertyname[false] -> ^( $propertyname $next) )? ;
	[GrammarRule("propertyname")]
	private AstParserRuleReturnScope<object, IToken> propertyname(bool subquery)
	{
		EnterRule_propertyname();
		EnterRule("propertyname", 30);
		TraceIn("propertyname", 30);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken char_literal119 = default(IToken);
		AstParserRuleReturnScope<object, IToken> next = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> identifierpart118 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal119_tree = default(object);
		RewriteRuleITokenStream stream_78=new RewriteRuleITokenStream(adaptor,"token 78");
		RewriteRuleSubtreeStream stream_identifierpart=new RewriteRuleSubtreeStream(adaptor,"rule identifierpart");
		RewriteRuleSubtreeStream stream_subpropertyname=new RewriteRuleSubtreeStream(adaptor,"rule subpropertyname");
		try { DebugEnterRule(GrammarFileName, "propertyname");
		DebugLocation(134, 108);
		try
		{
			// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:135:2: ( ( identifierpart[subquery] -> identifierpart ) ( '/' next= subpropertyname[false] -> ^( $propertyname $next) )? )
			DebugEnterAlt(1);
			// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:135:4: ( identifierpart[subquery] -> identifierpart ) ( '/' next= subpropertyname[false] -> ^( $propertyname $next) )?
			{
			DebugLocation(135, 4);
			// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:135:4: ( identifierpart[subquery] -> identifierpart )
			DebugEnterAlt(1);
			// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:135:5: identifierpart[subquery]
			{
			DebugLocation(135, 5);
			PushFollow(Follow._identifierpart_in_propertyname1023);
			identifierpart118=identifierpart(subquery);
			PopFollow();

			stream_identifierpart.Add(identifierpart118.Tree);


			{
			// AST REWRITE
			// elements: identifierpart
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 135:30: -> identifierpart
			{
				DebugLocation(135, 33);
				adaptor.AddChild(root_0, stream_identifierpart.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(135, 49);
			// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:135:49: ( '/' next= subpropertyname[false] -> ^( $propertyname $next) )?
			int alt29=2;
			try { DebugEnterSubRule(29);
			try { DebugEnterDecision(29, false);
			int LA29_1 = input.LA(1);

			if ((LA29_1==78))
			{
				int LA29_2 = input.LA(2);

				if ((LA29_2==DYNAMICIDENTIFIER||LA29_2==IDENTIFIER))
				{
					alt29 = 1;
				}
			}
			} finally { DebugExitDecision(29); }
			switch (alt29)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:135:50: '/' next= subpropertyname[false]
				{
				DebugLocation(135, 50);
				char_literal119=(IToken)Match(input,78,Follow._78_in_propertyname1032);  
				stream_78.Add(char_literal119);

				DebugLocation(135, 58);
				PushFollow(Follow._subpropertyname_in_propertyname1036);
				next=subpropertyname(false);
				PopFollow();

				stream_subpropertyname.Add(next.Tree);


				{
				// AST REWRITE
				// elements: propertyname, next
				// token labels: 
				// rule labels: next, retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_next=new RewriteRuleSubtreeStream(adaptor,"rule next",next!=null?next.Tree:null);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 135:82: -> ^( $propertyname $next)
				{
					DebugLocation(135, 85);
					// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:135:85: ^( $propertyname $next)
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(135, 88);
					root_1 = (object)adaptor.BecomeRoot(stream_retval.NextNode(), root_1);

					DebugLocation(135, 102);
					adaptor.AddChild(root_1, stream_next.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(29); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("propertyname", 30);
			LeaveRule("propertyname", 30);
			LeaveRule_propertyname();
		}
		DebugLocation(135, 108);
		} finally { DebugExitRule(GrammarFileName, "propertyname"); }
		return retval;

	}
	// $ANTLR end "propertyname"

	partial void EnterRule_subpropertyname();
	partial void LeaveRule_subpropertyname();
	// $ANTLR start "subpropertyname"
	// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:137:1: subpropertyname[bool subquery] : propertyname[false] ;
	[GrammarRule("subpropertyname")]
	private AstParserRuleReturnScope<object, IToken> subpropertyname(bool subquery)
	{
		EnterRule_subpropertyname();
		EnterRule("subpropertyname", 31);
		TraceIn("subpropertyname", 31);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		AstParserRuleReturnScope<object, IToken> propertyname120 = default(AstParserRuleReturnScope<object, IToken>);

		try { DebugEnterRule(GrammarFileName, "subpropertyname");
		DebugLocation(137, 22);
		try
		{
			// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:138:2: ( propertyname[false] )
			DebugEnterAlt(1);
			// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:138:4: propertyname[false]
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(138, 4);
			PushFollow(Follow._propertyname_in_subpropertyname1059);
			propertyname120=propertyname(false);
			PopFollow();

			adaptor.AddChild(root_0, propertyname120.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("subpropertyname", 31);
			LeaveRule("subpropertyname", 31);
			LeaveRule_subpropertyname();
		}
		DebugLocation(138, 22);
		} finally { DebugExitRule(GrammarFileName, "subpropertyname"); }
		return retval;

	}
	// $ANTLR end "subpropertyname"

	partial void EnterRule_identifierpart();
	partial void LeaveRule_identifierpart();
	// $ANTLR start "identifierpart"
	// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:140:1: identifierpart[bool subquery] : (id= IDENTIFIER -> {subquery}? ALIAS[$id] -> IDENTIFIER[$id] | DYNAMICIDENTIFIER -> DYNAMICIDENTIFIER ) ;
	[GrammarRule("identifierpart")]
	private AstParserRuleReturnScope<object, IToken> identifierpart(bool subquery)
	{
		EnterRule_identifierpart();
		EnterRule("identifierpart", 32);
		TraceIn("identifierpart", 32);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken id = default(IToken);
		IToken DYNAMICIDENTIFIER121 = default(IToken);

		object id_tree = default(object);
		object DYNAMICIDENTIFIER121_tree = default(object);
		RewriteRuleITokenStream stream_IDENTIFIER=new RewriteRuleITokenStream(adaptor,"token IDENTIFIER");
		RewriteRuleITokenStream stream_DYNAMICIDENTIFIER=new RewriteRuleITokenStream(adaptor,"token DYNAMICIDENTIFIER");
		try { DebugEnterRule(GrammarFileName, "identifierpart");
		DebugLocation(140, 43);
		try
		{
			// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:141:2: ( (id= IDENTIFIER -> {subquery}? ALIAS[$id] -> IDENTIFIER[$id] | DYNAMICIDENTIFIER -> DYNAMICIDENTIFIER ) )
			DebugEnterAlt(1);
			// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:141:4: (id= IDENTIFIER -> {subquery}? ALIAS[$id] -> IDENTIFIER[$id] | DYNAMICIDENTIFIER -> DYNAMICIDENTIFIER )
			{
			DebugLocation(141, 4);
			// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:141:4: (id= IDENTIFIER -> {subquery}? ALIAS[$id] -> IDENTIFIER[$id] | DYNAMICIDENTIFIER -> DYNAMICIDENTIFIER )
			int alt30=2;
			try { DebugEnterSubRule(30);
			try { DebugEnterDecision(30, false);
			int LA30_1 = input.LA(1);

			if ((LA30_1==IDENTIFIER))
			{
				alt30 = 1;
			}
			else if ((LA30_1==DYNAMICIDENTIFIER))
			{
				alt30 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 30, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(30); }
			switch (alt30)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:141:5: id= IDENTIFIER
				{
				DebugLocation(141, 7);
				id=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_identifierpart1074);  
				stream_IDENTIFIER.Add(id);



				{
				// AST REWRITE
				// elements: IDENTIFIER
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 141:19: -> {subquery}? ALIAS[$id]
				if (subquery)
				{
					DebugLocation(141, 34);
					adaptor.AddChild(root_0, (object)adaptor.Create(ALIAS, id));

				}
				else // 142:5: -> IDENTIFIER[$id]
				{
					DebugLocation(142, 8);
					adaptor.AddChild(root_0, (object)adaptor.Create(IDENTIFIER, id));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:143:5: DYNAMICIDENTIFIER
				{
				DebugLocation(143, 5);
				DYNAMICIDENTIFIER121=(IToken)Match(input,DYNAMICIDENTIFIER,Follow._DYNAMICIDENTIFIER_in_identifierpart1096);  
				stream_DYNAMICIDENTIFIER.Add(DYNAMICIDENTIFIER121);



				{
				// AST REWRITE
				// elements: DYNAMICIDENTIFIER
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 143:23: -> DYNAMICIDENTIFIER
				{
					DebugLocation(143, 26);
					adaptor.AddChild(root_0, stream_DYNAMICIDENTIFIER.NextNode());

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(30); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("identifierpart", 32);
			LeaveRule("identifierpart", 32);
			LeaveRule_identifierpart();
		}
		DebugLocation(143, 43);
		} finally { DebugExitRule(GrammarFileName, "identifierpart"); }
		return retval;

	}
	// $ANTLR end "identifierpart"

	partial void EnterRule_filteroperator();
	partial void LeaveRule_filteroperator();
	// $ANTLR start "filteroperator"
	// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:145:1: filteroperator : ( EQUALS | NOTEQUALS | GREATERTHAN | GREATERTHANOREQUAL | LESSTHAN | LESSTHANOREQUAL );
	[GrammarRule("filteroperator")]
	private AstParserRuleReturnScope<object, IToken> filteroperator()
	{
		EnterRule_filteroperator();
		EnterRule("filteroperator", 33);
		TraceIn("filteroperator", 33);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken set122 = default(IToken);

		object set122_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "filteroperator");
		DebugLocation(145, 85);
		try
		{
			// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:146:2: ( EQUALS | NOTEQUALS | GREATERTHAN | GREATERTHANOREQUAL | LESSTHAN | LESSTHANOREQUAL )
			DebugEnterAlt(1);
			// C:\\git\\other\\LinqToQuerystring\\LinqToQuerystring\\LinqToQuerystring.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(146, 2);

			set122=(IToken)input.LT(1);
			if (input.LA(1)==EQUALS||(input.LA(1)>=GREATERTHAN && input.LA(1)<=GREATERTHANOREQUAL)||(input.LA(1)>=LESSTHAN && input.LA(1)<=LESSTHANOREQUAL)||input.LA(1)==NOTEQUALS)
			{
				input.Consume();
				adaptor.AddChild(root_0, (object)adaptor.Create(set122));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("filteroperator", 33);
			LeaveRule("filteroperator", 33);
			LeaveRule_filteroperator();
		}
		DebugLocation(146, 85);
		} finally { DebugExitRule(GrammarFileName, "filteroperator"); }
		return retval;

	}
	// $ANTLR end "filteroperator"
	#endregion Rules


	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _param_in_prog76 = new BitSet(new ulong[]{0x290000C030000402UL,0x410UL});
		public static readonly BitSet _74_in_prog79 = new BitSet(new ulong[]{0x290000C030000400UL,0x10UL});
		public static readonly BitSet _param_in_prog82 = new BitSet(new ulong[]{0x290000C030000402UL,0x410UL});
		public static readonly BitSet _orderby_in_param95 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _top_in_param99 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _skip_in_param103 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _filter_in_param107 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _select_in_param111 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _inlinecount_in_param115 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expand_in_param119 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ignored_in_param123 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _apply_in_param127 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SKIP_in_skip138 = new BitSet(new ulong[]{0x10000000000UL});
		public static readonly BitSet _INT_in_skip141 = new BitSet(new ulong[]{0x10000000002UL});
		public static readonly BitSet _TOP_in_top152 = new BitSet(new ulong[]{0x10000000000UL});
		public static readonly BitSet _INT_in_top155 = new BitSet(new ulong[]{0x10000000002UL});
		public static readonly BitSet _FILTER_in_filter166 = new BitSet(new ulong[]{0x9629C93903BD8000UL,0xB2BUL});
		public static readonly BitSet _filterexpression_in_filter169 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SELECT_in_select180 = new BitSet(new ulong[]{0x2001000000UL});
		public static readonly BitSet _propertyname_in_select183 = new BitSet(new ulong[]{0x4000000000000002UL,0x2000UL});
		public static readonly BitSet _SPACE_in_select187 = new BitSet(new ulong[]{0x800UL});
		public static readonly BitSet _asexp_in_select190 = new BitSet(new ulong[]{0x2UL,0x2000UL});
		public static readonly BitSet _77_in_select195 = new BitSet(new ulong[]{0x2001000000UL});
		public static readonly BitSet _propertyname_in_select198 = new BitSet(new ulong[]{0x4000000000000002UL,0x2000UL});
		public static readonly BitSet _SPACE_in_select202 = new BitSet(new ulong[]{0x800UL});
		public static readonly BitSet _asexp_in_select205 = new BitSet(new ulong[]{0x2UL,0x2000UL});
		public static readonly BitSet _AS_in_asexp221 = new BitSet(new ulong[]{0x4000000000000000UL});
		public static readonly BitSet _SPACE_in_asexp224 = new BitSet(new ulong[]{0x2000000000UL});
		public static readonly BitSet _IDENTIFIER_in_asexp227 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _APPLY_in_apply236 = new BitSet(new ulong[]{0x10UL});
		public static readonly BitSet _aggexpr_in_apply239 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _applyTrafo_in_aggexpr248 = new BitSet(new ulong[]{0x2UL,0x4000UL});
		public static readonly BitSet _78_in_aggexpr251 = new BitSet(new ulong[]{0x10UL});
		public static readonly BitSet _applyTrafo_in_aggexpr254 = new BitSet(new ulong[]{0x2UL,0x4000UL});
		public static readonly BitSet _aggregateTrafo_in_applyTrafo265 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _AGGREGATE_in_aggregateTrafo274 = new BitSet(new ulong[]{0x0UL,0x800UL});
		public static readonly BitSet _75_in_aggregateTrafo277 = new BitSet(new ulong[]{0x2001000000UL});
		public static readonly BitSet _aggregateExpr_in_aggregateTrafo279 = new BitSet(new ulong[]{0x0UL,0x3000UL});
		public static readonly BitSet _77_in_aggregateTrafo282 = new BitSet(new ulong[]{0x2001000000UL});
		public static readonly BitSet _aggregateExpr_in_aggregateTrafo285 = new BitSet(new ulong[]{0x0UL,0x3000UL});
		public static readonly BitSet _76_in_aggregateTrafo288 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _propertyname_in_aggregateExpr297 = new BitSet(new ulong[]{0x4000000000000000UL});
		public static readonly BitSet _SPACE_in_aggregateExpr300 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _aggregateWith_in_aggregateExpr303 = new BitSet(new ulong[]{0x4000000000000000UL});
		public static readonly BitSet _SPACE_in_aggregateExpr305 = new BitSet(new ulong[]{0x800UL});
		public static readonly BitSet _asexp_in_aggregateExpr308 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WITH_in_aggregateWith318 = new BitSet(new ulong[]{0x4000000000000000UL});
		public static readonly BitSet _SPACE_in_aggregateWith321 = new BitSet(new ulong[]{0x300000004000UL,0x4UL});
		public static readonly BitSet _aggregateMethod_in_aggregateWith324 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _EXPAND_in_expand354 = new BitSet(new ulong[]{0x2001000000UL});
		public static readonly BitSet _propertyname_in_expand357 = new BitSet(new ulong[]{0x2UL,0x2000UL});
		public static readonly BitSet _77_in_expand361 = new BitSet(new ulong[]{0x2001000000UL});
		public static readonly BitSet _propertyname_in_expand364 = new BitSet(new ulong[]{0x2UL,0x2000UL});
		public static readonly BitSet _INLINECOUNT_in_inlinecount376 = new BitSet(new ulong[]{0x80UL});
		public static readonly BitSet _ALLPAGES_in_inlinecount379 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INLINECOUNT_in_inlinecount384 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _NONE_in_inlinecount386 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IGNORED_in_ignored396 = new BitSet(new ulong[]{0x2000000000UL});
		public static readonly BitSet _IDENTIFIER_in_ignored398 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _orexpression_in_filterexpression412 = new BitSet(new ulong[]{0x4000000000000002UL});
		public static readonly BitSet _SPACE_in_filterexpression416 = new BitSet(new ulong[]{0x80000000000000UL});
		public static readonly BitSet _OR_in_filterexpression419 = new BitSet(new ulong[]{0x4000000000000000UL});
		public static readonly BitSet _SPACE_in_filterexpression422 = new BitSet(new ulong[]{0x9629C93903BD8000UL,0xB2BUL});
		public static readonly BitSet _orexpression_in_filterexpression425 = new BitSet(new ulong[]{0x4000000000000002UL});
		public static readonly BitSet _andexpression_in_orexpression439 = new BitSet(new ulong[]{0x4000000000000002UL});
		public static readonly BitSet _SPACE_in_orexpression443 = new BitSet(new ulong[]{0x100UL});
		public static readonly BitSet _AND_in_orexpression446 = new BitSet(new ulong[]{0x4000000000000000UL});
		public static readonly BitSet _SPACE_in_orexpression449 = new BitSet(new ulong[]{0x9629C93903BD8000UL,0xB2BUL});
		public static readonly BitSet _andexpression_in_orexpression452 = new BitSet(new ulong[]{0x4000000000000002UL});
		public static readonly BitSet _NOT_in_andexpression466 = new BitSet(new ulong[]{0x4000000000000000UL});
		public static readonly BitSet _SPACE_in_andexpression469 = new BitSet(new ulong[]{0x9621C93903BD8000UL,0xB2BUL});
		public static readonly BitSet _75_in_andexpression472 = new BitSet(new ulong[]{0x9629C93903BD8000UL,0xB2BUL});
		public static readonly BitSet _filterexpression_in_andexpression474 = new BitSet(new ulong[]{0x0UL,0x1000UL});
		public static readonly BitSet _76_in_andexpression477 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _booleanexpression_in_andexpression481 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _75_in_andexpression489 = new BitSet(new ulong[]{0x9629C93903BD8000UL,0xB2BUL});
		public static readonly BitSet _filterexpression_in_andexpression491 = new BitSet(new ulong[]{0x0UL,0x1000UL});
		public static readonly BitSet _76_in_andexpression494 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _booleanexpression_in_andexpression498 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _atom_in_booleanexpression514 = new BitSet(new ulong[]{0x4000000000000002UL});
		public static readonly BitSet _SPACE_in_booleanexpression522 = new BitSet(new ulong[]{0x100600C4000000UL});
		public static readonly BitSet _EQUALS_in_booleanexpression527 = new BitSet(new ulong[]{0x4000000000000000UL});
		public static readonly BitSet _NOTEQUALS_in_booleanexpression533 = new BitSet(new ulong[]{0x4000000000000000UL});
		public static readonly BitSet _GREATERTHAN_in_booleanexpression539 = new BitSet(new ulong[]{0x4000000000000000UL});
		public static readonly BitSet _GREATERTHANOREQUAL_in_booleanexpression545 = new BitSet(new ulong[]{0x4000000000000000UL});
		public static readonly BitSet _LESSTHAN_in_booleanexpression551 = new BitSet(new ulong[]{0x4000000000000000UL});
		public static readonly BitSet _LESSTHANOREQUAL_in_booleanexpression557 = new BitSet(new ulong[]{0x4000000000000000UL});
		public static readonly BitSet _SPACE_in_booleanexpression560 = new BitSet(new ulong[]{0x9621C93903BD8000UL,0x32BUL});
		public static readonly BitSet _atom_in_booleanexpression564 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _functioncall_in_atom616 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _constant_in_atom622 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _accessor_in_atom627 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _function_in_functioncall639 = new BitSet(new ulong[]{0x0UL,0x800UL});
		public static readonly BitSet _75_in_functioncall642 = new BitSet(new ulong[]{0x9621C93903BD8000UL,0x32BUL});
		public static readonly BitSet _atom_in_functioncall644 = new BitSet(new ulong[]{0x0UL,0x3000UL});
		public static readonly BitSet _77_in_functioncall648 = new BitSet(new ulong[]{0x9621C93903BD8000UL,0x32BUL});
		public static readonly BitSet _atom_in_functioncall650 = new BitSet(new ulong[]{0x0UL,0x3000UL});
		public static readonly BitSet _76_in_functioncall655 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _propertyname_in_accessor667 = new BitSet(new ulong[]{0x2UL,0x4000UL});
		public static readonly BitSet _78_in_accessor680 = new BitSet(new ulong[]{0x300000024240UL,0x4UL});
		public static readonly BitSet _ANY_in_accessor685 = new BitSet(new ulong[]{0x0UL,0x800UL});
		public static readonly BitSet _ALL_in_accessor691 = new BitSet(new ulong[]{0x0UL,0x800UL});
		public static readonly BitSet _COUNT_in_accessor697 = new BitSet(new ulong[]{0x0UL,0x800UL});
		public static readonly BitSet _MAX_in_accessor703 = new BitSet(new ulong[]{0x0UL,0x800UL});
		public static readonly BitSet _MIN_in_accessor709 = new BitSet(new ulong[]{0x0UL,0x800UL});
		public static readonly BitSet _SUM_in_accessor715 = new BitSet(new ulong[]{0x0UL,0x800UL});
		public static readonly BitSet _AVERAGE_in_accessor721 = new BitSet(new ulong[]{0x0UL,0x800UL});
		public static readonly BitSet _75_in_accessor728 = new BitSet(new ulong[]{0x2000000000UL,0x1000UL});
		public static readonly BitSet _IDENTIFIER_in_accessor739 = new BitSet(new ulong[]{0x0UL,0x8000UL});
		public static readonly BitSet _79_in_accessor741 = new BitSet(new ulong[]{0x4000000000000000UL});
		public static readonly BitSet _SPACE_in_accessor743 = new BitSet(new ulong[]{0x9629C93903BD8000UL,0xB2BUL});
		public static readonly BitSet _filterexpression_in_accessor745 = new BitSet(new ulong[]{0x0UL,0x1000UL});
		public static readonly BitSet _76_in_accessor785 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ORDERBY_in_orderby872 = new BitSet(new ulong[]{0x2001000000UL});
		public static readonly BitSet _orderbylist_in_orderby875 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _orderpropertyname_in_orderbylist885 = new BitSet(new ulong[]{0x2UL,0x2000UL});
		public static readonly BitSet _77_in_orderbylist888 = new BitSet(new ulong[]{0x2001000000UL});
		public static readonly BitSet _orderpropertyname_in_orderbylist891 = new BitSet(new ulong[]{0x2UL,0x2000UL});
		public static readonly BitSet _propertyname_in_orderpropertyname902 = new BitSet(new ulong[]{0x4000000000000002UL});
		public static readonly BitSet _SPACE_in_orderpropertyname925 = new BitSet(new ulong[]{0x401000UL});
		public static readonly BitSet _ASC_in_orderpropertyname930 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DESC_in_orderpropertyname936 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INT_in_constant960 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _BOOL_in_constant965 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_constant970 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DATETIME_in_constant975 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LONG_in_constant980 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SINGLE_in_constant985 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DECIMAL_in_constant990 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOUBLE_in_constant995 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _GUID_in_constant1000 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _BYTE_in_constant1005 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NULL_in_constant1010 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _identifierpart_in_propertyname1023 = new BitSet(new ulong[]{0x2UL,0x4000UL});
		public static readonly BitSet _78_in_propertyname1032 = new BitSet(new ulong[]{0x2001000000UL});
		public static readonly BitSet _subpropertyname_in_propertyname1036 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _propertyname_in_subpropertyname1059 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENTIFIER_in_identifierpart1074 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DYNAMICIDENTIFIER_in_identifierpart1096 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace  LinqToQuerystring 
